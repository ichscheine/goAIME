{"version":3,"file":"static/js/747.bd1340b8.chunk.js","mappings":"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","sources":["components/ProgressTracking.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { useEffect as useEffectDebug } from 'react';\nimport './ProgressTracking.css';\n\nconst ProgressTracking = ({ username }) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [progressData, setProgressData] = useState({\n    topicPerformance: {},\n    difficultyPerformance: {},\n    overallPerformance: {\n      totalSessions: 0,\n      totalProblems: 0,\n      averageScore: 0,\n      accuracyPercentage: 0,\n      averageSpeed: 0\n    },\n    recentSessions: [],\n    trendData: {\n      accuracy: [],\n      score: [],\n      dates: []\n    },\n    cohortComparison: {\n      userScore: 0,\n      userAccuracy: 0,\n      userSpeed: 0,\n      peerMaxScore: 0,\n      peerMaxAccuracy: 0,\n      peerMaxSpeed: 0,\n      userScorePercentile: 0,\n      userAccuracyPercentile: 0,\n      userSpeedPercentile: 0,\n    }\n  });\n\n  useEffect(() => {\n    async function fetchProgressData() {\n      if (!username) return;\n      \n      setLoading(true);\n      setError(null);\n      \n      try {\n        console.log(`Fetching progress data for user: ${username}`);\n        // Test API connection first\n        const testResponse = await fetch('/api/health');\n        console.log('API health check:', testResponse.ok ? 'OK' : 'Failed');\n        \n        // Add logging for goAmy's cohort metrics to diagnose speed issue\n        if (username === 'goamy') {\n          try {\n            const cohortResponse = await axios.get(`/api/cohort/metrics/${username}`);\n            console.log('Cohort metrics response for goAmy:', cohortResponse.data);\n            console.log('User speed from cohort metrics:', cohortResponse.data.data.userSpeed);\n          } catch (error) {\n            console.error('Error fetching cohort metrics:', error);\n          }\n        }\n        \n        // Fetch user progress data from the API\n        const response = await axios.get(`/api/user/progress/${username}`);\n        console.log('Progress data response:', response);\n        \n        if (response.data && response.data.success) {\n          // Log the received data structure to diagnose missing parts\n          console.log('Progress data structure:', JSON.stringify(response.data.data, null, 2));\n          \n          // Check if difficulty and topic data exist and log if missing\n          if (!response.data.data.difficultyPerformance || Object.keys(response.data.data.difficultyPerformance).length === 0) {\n            console.warn('Missing difficulty performance data from backend');\n            // Log the error but don't add mock data - use real data only\n          }\n          \n          if (!response.data.data.topicPerformance || Object.keys(response.data.data.topicPerformance).length === 0) {\n            console.warn('Missing topic performance data from backend');\n            // Log the error but don't add mock data - use real data only\n          }\n          \n          // Always try to fetch the cohort metrics for complete data\n          try {\n            const cohortResponse = await axios.get(`/api/cohort/metrics/${username}`);\n            console.log('Cohort metrics response:', cohortResponse.data);\n            \n            if (cohortResponse.data && cohortResponse.data.success) {\n              // Merge cohort data with progress data, but preserve user metrics from overallPerformance\n              const userScore = response.data.data.overallPerformance.averageScore;\n              const userAccuracy = response.data.data.overallPerformance.accuracyPercentage;\n              const userSpeed = response.data.data.overallPerformance.averageSpeed;\n              \n              response.data.data.cohortComparison = {\n                ...response.data.data.cohortComparison,\n                ...cohortResponse.data.data,\n                // Override with values from overallPerformance for consistency\n                userScore,\n                userAccuracy,\n                userSpeed\n              };\n              \n              console.log('Combined data with cohort metrics (preserving user metrics from overallPerformance):', response.data.data.cohortComparison);\n            }\n          } catch (cohortError) {\n            console.warn('Failed to fetch cohort metrics, will use basic data:', cohortError);\n          }            // Log cohort comparison data from the API\n            console.log('Cohort comparison data from API:', response.data.data.cohortComparison);\n            \n            // Add missing cohort data with real values if possible\n            if (!response.data.data.cohortComparison.userScore || !response.data.data.cohortComparison.peerMaxScore) {\n              console.warn('Adding or completing cohort data');\n              \n              // Use the average score from overall performance for user score\n              response.data.data.cohortComparison.userScore = response.data.data.overallPerformance.averageScore;\n              console.log('Setting userScore from overallPerformance:', response.data.data.cohortComparison.userScore);\n              \n              // Use user accuracy from overall performance\n              response.data.data.cohortComparison.userAccuracy = response.data.data.overallPerformance.accuracyPercentage;\n              console.log('Setting userAccuracy from overallPerformance:', response.data.data.cohortComparison.userAccuracy);\n              \n              // Use speed from overall performance\n              if (response.data.data.overallPerformance.averageSpeed) {\n                response.data.data.cohortComparison.userSpeed = response.data.data.overallPerformance.averageSpeed;\n                console.log('Setting userSpeed from overallPerformance:', response.data.data.cohortComparison.userSpeed);\n              } else {\n                console.warn('No speed data found, using default value');\n                response.data.data.cohortComparison.userSpeed = 45; // Mock speed in seconds\n                // Also update overall performance for consistency\n                response.data.data.overallPerformance.averageSpeed = 45;\n              }\n              \n              // Only use mock peer data if real data is not available\n              if (!response.data.data.cohortComparison.peerMaxScore) {\n                console.warn('Using mock peer max score');\n                response.data.data.cohortComparison.peerMaxScore = 45; // Using a more realistic value\n              }\n              \n              if (!response.data.data.cohortComparison.peerMaxAccuracy) {\n                console.warn('Using mock peer max accuracy');\n                response.data.data.cohortComparison.peerMaxAccuracy = 24; // Using a more realistic value that matches screenshot\n              }\n              \n              if (!response.data.data.cohortComparison.peerMaxSpeed) {\n                console.warn('Using mock peer max speed');\n                response.data.data.cohortComparison.peerMaxSpeed = 30; // Mock speed in seconds (lower is better)\n              }\n              \n              // Also add to overall performance if not there\n              if (!response.data.data.overallPerformance.averageSpeed) {\n                // Use the cohort metrics speed value if it exists\n                if (response.data.data.cohortComparison.userSpeed) {\n                  response.data.data.overallPerformance.averageSpeed = response.data.data.cohortComparison.userSpeed;\n                  console.log('Setting averageSpeed from cohort metrics:', response.data.data.overallPerformance.averageSpeed);\n                } else {\n                  response.data.data.overallPerformance.averageSpeed = 45;\n                }\n              }\n            }\n          \n          // Final data consistency check\n          if (response.data.data.overallPerformance && response.data.data.cohortComparison) {\n            // Ensure speed values are consistent and non-zero if available\n            if (response.data.data.cohortComparison.userSpeed && !response.data.data.overallPerformance.averageSpeed) {\n              response.data.data.overallPerformance.averageSpeed = response.data.data.cohortComparison.userSpeed;\n            } else if (response.data.data.overallPerformance.averageSpeed && !response.data.data.cohortComparison.userSpeed) {\n              response.data.data.cohortComparison.userSpeed = response.data.data.overallPerformance.averageSpeed;\n            }\n            \n            // Final check to ensure userSpeed is not 0 when we have averageSpeed\n            if (response.data.data.overallPerformance.averageSpeed && \n                (response.data.data.cohortComparison.userSpeed === 0 || isNaN(response.data.data.cohortComparison.userSpeed))) {\n              response.data.data.cohortComparison.userSpeed = response.data.data.overallPerformance.averageSpeed;\n            }\n            \n            // Log final values for verification\n            console.log('Final consistency check - overallPerformance:', {\n              averageScore: response.data.data.overallPerformance.averageScore,\n              accuracyPercentage: response.data.data.overallPerformance.accuracyPercentage,\n              averageSpeed: response.data.data.overallPerformance.averageSpeed\n            });\n            \n            console.log('Final consistency check - cohortComparison:', {\n              userScore: response.data.data.cohortComparison.userScore,\n              userAccuracy: response.data.data.cohortComparison.userAccuracy,\n              userSpeed: response.data.data.cohortComparison.userSpeed\n            });\n          }\n          \n          setProgressData(response.data.data);\n        } else {\n          setError('Failed to load progress data');\n        }\n      } catch (error) {\n        console.error('Error fetching progress data:', error);\n        setError('Error connecting to server');\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    fetchProgressData();\n  }, [username]);\n  \n  // Debug effect to log state whenever it changes\n  useEffectDebug(() => {\n    console.log('Current progressData state:', progressData);\n  }, [progressData]);\n\n  // Format accuracy percentage with % symbol\n  const formatAccuracy = (accuracy) => {\n    return `${Math.round(accuracy)}%`;\n  };\n\n  // Format speed in seconds to a user-friendly string\n  const formatSpeed = (seconds) => {\n    if (seconds === undefined || seconds === null) {\n      console.warn('Undefined or null seconds value passed to formatSpeed');\n      return '0.00s';\n    }\n    return `${Number(seconds).toFixed(2)}s`;\n  };\n  \n  // Calculate speed percentile (lower is better for speed, but higher percentile is better)\n  const calculateSpeedPercentile = () => {\n    // If userSpeed is 0 or missing data, return a base percentile of 10\n    if (!progressData.cohortComparison.userSpeed || !progressData.cohortComparison.peerMaxSpeed) {\n      console.warn('Missing speed data for percentile calculation:', {\n        userSpeed: progressData.cohortComparison.userSpeed,\n        peerMaxSpeed: progressData.cohortComparison.peerMaxSpeed\n      });\n      return 10; // Return a default low percentile instead of 0\n    }\n    \n    // Get the user's speed and peer max speed\n    const userSpeed = Number(progressData.cohortComparison.userSpeed);\n    const peerMaxSpeed = Number(progressData.cohortComparison.peerMaxSpeed);\n    \n    // Handle edge cases\n    if (userSpeed <= 0) return 100; // Perfect speed (instant) gets 100th percentile\n    if (peerMaxSpeed <= 0) return 20; // Return a modest percentile for edge case\n    \n    // If user speed is greater than peer max speed (slower), cap at 20th percentile\n    if (userSpeed > peerMaxSpeed) {\n      // Calculate a sliding scale from 5-20% based on how much slower\n      const slowFactor = Math.min(3, userSpeed / peerMaxSpeed);\n      return Math.max(5, Math.round(20 - ((slowFactor - 1) * 5)));\n    }\n    \n    // For users faster than peer max, calculate the percentile normally\n    // A lower speed is better, so we invert the ratio\n    const speedPercentile = Math.max(20, Math.min(95, 100 * (1 - (userSpeed / peerMaxSpeed))));\n    \n    // Log for debugging\n    console.log(`Speed Percentile Calculation: userSpeed=${userSpeed}s, peerMaxSpeed=${peerMaxSpeed}s, percentile=${speedPercentile.toFixed(2)}%`);\n    \n    return speedPercentile;\n  };\n  \n  // Determine the user's best metric\n  const findBestMetric = () => {\n    // Calculate ratios for each metric (normalized to 0-100 scale)\n    // For score and accuracy, normalize to 0-100 scale\n    // For speed, we already calculate a percentile where higher is better\n    const scoreRatio = (progressData.cohortComparison.userScore / 100) * 100;\n    const accuracyRatio = progressData.cohortComparison.userAccuracy;\n    // For speed, we calculate a percentile where higher is better\n    const speedPercentile = calculateSpeedPercentile();\n    \n    // Get the best metric based on highest percentile\n    let bestMetric = '';\n    \n    // Create an array of metrics for easier comparison and logging\n    const metrics = [\n      { name: 'Score', value: scoreRatio },\n      { name: 'Accuracy', value: accuracyRatio },\n      { name: 'Speed', value: speedPercentile }\n    ];\n    \n    // Sort metrics by their values (descending)\n    const sortedMetrics = [...metrics].sort((a, b) => b.value - a.value);\n    \n    // Log metric rankings for debugging\n    console.log('Metric Rankings:');\n    sortedMetrics.forEach((metric, index) => {\n      console.log(`  ${index + 1}. ${metric.name}: ${metric.value.toFixed(2)}%`);\n    });\n    \n    // The best metric is the one with the highest value\n    bestMetric = sortedMetrics[0].name;\n    \n    return bestMetric;\n  };\n\n  // Format date in a user-friendly way\n  const formatDate = (dateString) => {\n    try {\n      const date = new Date(dateString);\n      return date.toLocaleDateString(undefined, { \n        year: 'numeric', \n        month: 'short', \n        day: 'numeric' \n      });\n    } catch (e) {\n      return 'Unknown date';\n    }\n  };\n\n  return (\n    <div className=\"progress-tracking-container\">\n      <div className=\"progress-header\">\n        <h2>Your Progress Dashboard</h2>\n        <Link \n          to=\"/dashboard\"\n          className=\"back-to-dashboard\"\n        >\n          Back to Dashboard\n        </Link>\n      </div>\n      {loading ? (\n        <div className=\"progress-loading\">\n          <div className=\"spinner\"></div>\n          <p>Loading your progress data...</p>\n        </div>\n      ) : error ? (\n        <div className=\"progress-error\">\n          <p>{error}</p>\n          <p>Please try again later or contact support if the issue persists.</p>\n        </div>\n      ) : (\n        <>\n          <div className=\"progress-intro\">\n            <p>Track your improvement over time with detailed performance analytics. The more you practice, the more insights you'll see here!</p>\n          </div>\n          \n          <div className=\"progress-overview\">\n            <h3>Overall Performance</h3>\n            <div className=\"overview-stats\">\n              <div className=\"overview-stat\">\n                <div className=\"stat-value\">{progressData.overallPerformance.totalSessions}</div>\n                <div className=\"stat-label\">Total Sessions</div>\n              </div>\n              <div className=\"overview-stat\">\n                <div className=\"stat-value\">{progressData.overallPerformance.totalProblems}</div>\n                <div className=\"stat-label\">Problems Attempted</div>\n              </div>\n              <div className=\"overview-stat\">\n                <div className=\"stat-value\">{progressData.overallPerformance.averageScore.toFixed(2)}</div>\n                <div className=\"stat-label\">Avg. Score / Session</div>\n              </div>              \n              <div className=\"overview-stat\">\n                <div className=\"stat-value\">{progressData.overallPerformance.accuracyPercentage.toFixed(2)}%</div>\n                <div className=\"stat-label\">Avg. Accuracy / Session</div>\n              </div>\n              <div className=\"overview-stat\">\n                <div className=\"stat-value\">\n                  {isNaN(progressData.overallPerformance.averageSpeed) ? \n                    \"0s\" : \n                    `${Number(progressData.overallPerformance.averageSpeed).toFixed(0)}s`}\n                </div>\n                <div className=\"stat-label\">Avg. Speed / Problem</div>\n              </div>            </div>\n          </div>\n\n          {/* Performance Trend Section */}\n          <div className=\"performance-section\">\n            <h3>Recent Performance Trend</h3>\n            {progressData.trendData && progressData.trendData.accuracy && progressData.trendData.accuracy.length === 0 ? (\n              <p className=\"no-data\">No trend data available yet. Complete more sessions to see your progress over time.</p>\n            ) : (\n              <div className=\"trend-chart\">\n                <div className=\"time-series-chart\">\n                  <svg width=\"100%\" height=\"500\" viewBox=\"0 0 1000 500\" preserveAspectRatio=\"xMidYMid meet\">\n                    {/* Chart background */}\n                    <rect x=\"70\" y=\"40\" width=\"860\" height=\"380\" fill=\"#f8fafc\" rx=\"6\" ry=\"6\" />\n                    \n                    {/* X and Y axes */}\n                    <line x1=\"70\" y1=\"420\" x2=\"930\" y2=\"420\" stroke=\"#cbd5e1\" strokeWidth=\"2\" />\n                    <line x1=\"70\" y1=\"40\" x2=\"70\" y2=\"420\" stroke=\"#cbd5e1\" strokeWidth=\"2\" />\n                    <line x1=\"930\" y1=\"40\" x2=\"930\" y2=\"420\" stroke=\"#cbd5e1\" strokeWidth=\"2\" /> {/* Right y-axis for accuracy */}\n                    \n                    {/* Left Y-axis labels (Score) */}\n                    {progressData.trendData && progressData.trendData.score && progressData.trendData.score.length > 0 && (() => {\n                      const maxScore = Math.max(...progressData.trendData.score);\n                      const scoreStep = Math.ceil(maxScore / 4);\n                      const scoreLabels = [0, scoreStep, scoreStep * 2, scoreStep * 3, scoreStep * 4];\n                      \n                      return scoreLabels.map((tick, i) => (\n                        <g key={`score-tick-${i}`}>\n                          <line \n                            x1=\"65\" \n                            y1={420 - (tick * (380 / (scoreLabels[4] || 1)))} \n                            x2=\"70\" \n                            y2={420 - (tick * (380 / (scoreLabels[4] || 1)))} \n                            stroke=\"#cbd5e1\" \n                            strokeWidth=\"2\" \n                          />\n                          <text \n                            x=\"62\" \n                            y={420 - (tick * (380 / (scoreLabels[4] || 1)))} \n                            textAnchor=\"end\" \n                            alignmentBaseline=\"middle\" \n                            fontSize=\"14\"\n                            fill=\"#64748b\"\n                          >\n                            {tick}\n                          </text>\n                        </g>\n                      ));\n                    })()}\n\n                    {/* Right Y-axis labels (Accuracy) */}\n                    {[0, 25, 50, 75, 100].map((tick, i) => (\n                      <g key={`y-tick-${i}`}>\n                        <line \n                          x1=\"930\" \n                          y1={420 - (tick * 3.8)} \n                          x2=\"935\" \n                          y2={420 - (tick * 3.8)} \n                          stroke=\"#cbd5e1\" \n                          strokeWidth=\"2\" \n                        />\n                        <text \n                          x=\"938\" \n                          y={420 - (tick * 3.8)} \n                          textAnchor=\"start\" \n                          alignmentBaseline=\"middle\" \n                          fontSize=\"14\"\n                          fill=\"#64748b\"\n                        >\n                          {tick}%\n                        </text>\n                      </g>\n                    ))}\n                    \n                    {/* Grid lines */}\n                    {[0, 25, 50, 75, 100].map((tick, i) => (\n                      <line \n                        key={`grid-${i}`}\n                        x1=\"70\" \n                        y1={420 - (tick * 3.8)} \n                        x2=\"930\" \n                        y2={420 - (tick * 3.8)} \n                        stroke=\"#e2e8f0\" \n                        strokeWidth=\"1\" \n                        strokeDasharray=\"5,5\"\n                      />\n                    ))}\n                    \n                    {/* Generate line paths for accuracy and score */}\n                    {progressData.trendData && progressData.trendData.accuracy && progressData.trendData.accuracy.length > 0 && (\n                      <>\n                        {/* Score line (primary metric) */}\n                        <path \n                          d={progressData.trendData.score.reduce((path, score, i, arr) => {\n                            const dataLength = progressData.trendData.score.length;\n                            const xStep = 860 / (dataLength - 1 || 1);\n                            // Reverse the index to make dates ascend from left to right\n                            const revIndex = dataLength - 1 - i;\n                            const x = 70 + (revIndex * xStep);\n                            const maxScore = Math.max(...progressData.trendData.score);\n                            const y = 420 - (score * (380 / (maxScore || 1)));\n                            return `${path} ${i === 0 ? 'M' : 'L'} ${x},${y}`;\n                          }, '')}\n                          fill=\"none\" \n                          stroke=\"#4f46e5\" \n                          strokeWidth=\"3\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                        />\n                        \n                        {/* Score mean line */}\n                        {(() => {\n                          const scoreValues = progressData.trendData.score;\n                          if (scoreValues.length === 0) return null;\n                          \n                          // Calculate mean score\n                          const mean = scoreValues.reduce((sum, val) => sum + val, 0) / scoreValues.length;\n                          const maxScore = Math.max(...scoreValues);\n                          const y = 420 - (mean * (380 / (maxScore || 1)));\n                          \n                          return (\n                            <line \n                              x1=\"70\" \n                              y1={y} \n                              x2=\"930\" \n                              y2={y} \n                              stroke=\"#4f46e5\" \n                              className=\"mean-line\" \n                            />\n                          );\n                        })()}\n                        \n                        {/* Score confidence interval area */}\n                        {(() => {\n                          const scoreValues = progressData.trendData.score;\n                          if (scoreValues.length < 3) return null;\n                          \n                          // Calculate mean and standard deviation\n                          const mean = scoreValues.reduce((sum, val) => sum + val, 0) / scoreValues.length;\n                          const variance = scoreValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / scoreValues.length;\n                          const stdDev = Math.sqrt(variance);\n                          \n                          // 95% confidence interval = mean ± 1.96 * (stdDev / sqrt(n))\n                          const confidenceFactor = 1.96 * (stdDev / Math.sqrt(scoreValues.length));\n                          const upperCI = mean + confidenceFactor;\n                          const lowerCI = Math.max(0, mean - confidenceFactor);\n                          \n                          const maxScore = Math.max(...scoreValues);\n                          const upperY = 420 - (upperCI * (380 / (maxScore || 1)));\n                          const lowerY = 420 - (lowerCI * (380 / (maxScore || 1)));\n                          \n                          return (\n                            <rect \n                              x=\"70\" \n                              y={upperY} \n                              width=\"860\" \n                              height={lowerY - upperY} \n                              fill=\"#4f46e5\" \n                              className=\"confidence-area\" \n                            />\n                          );\n                        })()}\n\n                        {/* Accuracy line (secondary metric) */}\n                        <path \n                          d={progressData.trendData.accuracy.reduce((path, accuracy, i) => {\n                            const dataLength = progressData.trendData.accuracy.length;\n                            const xStep = 860 / (dataLength - 1 || 1);\n                            // Reverse the index to make dates ascend from left to right\n                            const revIndex = dataLength - 1 - i;\n                            const x = 70 + (revIndex * xStep);\n                            const y = 420 - (accuracy * 3.8);\n                            return `${path} ${i === 0 ? 'M' : 'L'} ${x},${y}`;\n                          }, '')}\n                          fill=\"none\" \n                          stroke=\"#ffa500\" \n                          strokeWidth=\"3\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                        />\n                        \n                        {/* Accuracy mean line */}\n                        {(() => {\n                          const accuracyValues = progressData.trendData.accuracy;\n                          if (accuracyValues.length === 0) return null;\n                          \n                          // Calculate mean accuracy\n                          const mean = accuracyValues.reduce((sum, val) => sum + val, 0) / accuracyValues.length;\n                          const y = 420 - (mean * 3.8);\n                          \n                          return (\n                            <line \n                              x1=\"70\" \n                              y1={y} \n                              x2=\"930\" \n                              y2={y} \n                              stroke=\"#ffa500\" \n                              className=\"mean-line\" \n                            />\n                          );\n                        })()}\n                        \n                        {/* Accuracy confidence interval area */}\n                        {(() => {\n                          const accuracyValues = progressData.trendData.accuracy;\n                          if (accuracyValues.length < 3) return null;\n                          \n                          // Calculate mean and standard deviation\n                          const mean = accuracyValues.reduce((sum, val) => sum + val, 0) / accuracyValues.length;\n                          const variance = accuracyValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / accuracyValues.length;\n                          const stdDev = Math.sqrt(variance);\n                          \n                          // 95% confidence interval = mean ± 1.96 * (stdDev / sqrt(n))\n                          const confidenceFactor = 1.96 * (stdDev / Math.sqrt(accuracyValues.length));\n                          const upperCI = Math.min(100, mean + confidenceFactor);\n                          const lowerCI = Math.max(0, mean - confidenceFactor);\n                          \n                          const upperY = 420 - (upperCI * 3.8);\n                          const lowerY = 420 - (lowerCI * 3.8);\n                          \n                          return (\n                            <rect \n                              x=\"70\" \n                              y={upperY} \n                              width=\"860\" \n                              height={lowerY - upperY} \n                              fill=\"#ffa500\" \n                              className=\"confidence-area\" \n                            />\n                          );\n                        })()}\n                        \n                        {/* Score data points */}\n                        {progressData.trendData.score.map((score, i) => {\n                          const dataLength = progressData.trendData.score.length;\n                          const xStep = 860 / (dataLength - 1 || 1);\n                          // Reverse the index to make dates ascend from left to right\n                          const revIndex = dataLength - 1 - i;\n                          const x = 70 + (revIndex * xStep);\n                          const maxScore = Math.max(...progressData.trendData.score);\n                          const y = 420 - (score * (380 / (maxScore || 1)));\n                          return (\n                            <g key={`score-point-${i}`}>\n                              <circle \n                                cx={x}\n                                cy={y}\n                                r=\"6\" \n                                fill=\"#4f46e5\" \n                              />\n                              <circle \n                                cx={x}\n                                cy={y}\n                                r=\"4\" \n                                fill=\"#fff\" \n                              />\n                              <title>\n                                {`Date: ${formatDate(progressData.trendData.dates[i])}\\nAccuracy: ${progressData.trendData.accuracy[i]}%\\nScore: ${score}`}\n                              </title>\n                            </g>\n                          );\n                        })}\n                        \n                        {/* Accuracy data points */}\n                        {progressData.trendData.accuracy.map((accuracy, i) => {\n                          const dataLength = progressData.trendData.accuracy.length;\n                          const xStep = 860 / (dataLength - 1 || 1);\n                          // Reverse the index to make dates ascend from left to right\n                          const revIndex = dataLength - 1 - i;\n                          const x = 70 + (revIndex * xStep);\n                          const y = 420 - (accuracy * 3.8);\n                          return (\n                            <g key={`accuracy-point-${i}`}>\n                              <circle \n                                cx={x}\n                                cy={y}\n                                r=\"6\" \n                                fill=\"#ffa500\" \n                              />\n                              <circle \n                                cx={x}\n                                cy={y}\n                                r=\"4\" \n                                fill=\"#fff\" \n                              />\n                              <title>\n                                {`Date: ${formatDate(progressData.trendData.dates[i])}\\nAccuracy: ${accuracy}%\\nScore: ${progressData.trendData.score[i]}`}\n                              </title>\n                            </g>\n                          );\n                        })}\n                        \n                        {/* X-axis labels (dates) - fixed positioning */}\n                        {progressData.trendData.dates.map((date, i) => {\n                          const dataLength = progressData.trendData.dates.length;\n                          const xStep = 860 / (dataLength - 1 || 1);\n                          // Reverse the index to make dates ascend from left to right\n                          const revIndex = dataLength - 1 - i;\n                          const x = 70 + (revIndex * xStep);\n                          \n                          // Only show labels for the first, middle, and last date if there are more than 3\n                          const showLabel = dataLength <= 5 || i === 0 || i === dataLength - 1 || i === Math.floor(dataLength / 2);\n                          \n                          return showLabel ? (\n                            <text \n                              key={`x-label-${i}`}\n                              x={x} \n                              y=\"460\" \n                              textAnchor=\"middle\" \n                              fontSize=\"14\"\n                              fill=\"#64748b\"\n                              transform={`rotate(45 ${x}, 460)`}\n                            >\n                              {formatDate(date)}\n                            </text>\n                          ) : null;\n                        })}\n\n                        {/* Y-axis titles */}\n                        <text \n                          x=\"25\" \n                          y=\"230\" \n                          textAnchor=\"middle\" \n                          fontSize=\"15\"\n                          fontWeight=\"600\"\n                          fill=\"#64748b\"\n                          transform=\"rotate(-90 25, 230)\"\n                        >\n                          Score\n                        </text>\n                        <text \n                          x=\"975\" \n                          y=\"230\" \n                          textAnchor=\"middle\" \n                          fontSize=\"15\"\n                          fontWeight=\"600\"\n                          fill=\"#64748b\"\n                          transform=\"rotate(90 975, 230)\"\n                        >\n                          Accuracy (%)\n                        </text>\n                      </>\n                    )}\n                  </svg>\n                  \n                  <div className=\"chart-legend\">\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"#4f46e5\" }}></div>\n                      <div className=\"legend-label\">Score</div>\n                    </div>\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"#ffa500\" }}></div>\n                      <div className=\"legend-label\">Accuracy (%)</div>\n                    </div>\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"#4f46e5\", opacity: \"0.2\" }}></div>\n                      <div className=\"legend-label\">95% Confidence Interval</div>\n                    </div>\n                    <div className=\"legend-item\">\n                      <div style={{ width: \"20px\", height: \"2px\", backgroundColor: \"#4f46e5\", margin: \"8px 0\", backgroundImage: \"linear-gradient(to right, #4f46e5 50%, transparent 50%)\", backgroundSize: \"8px 100%\" }}></div>\n                      <div className=\"legend-label\">Mean Value</div>\n                    </div>\n                  </div>\n                  \n                  {/* User metrics statistics */}\n                  {(() => {\n                    const scoreValues = progressData.trendData.score;\n                    const accuracyValues = progressData.trendData.accuracy;\n                    \n                    if (scoreValues.length === 0 || accuracyValues.length === 0) return null;\n                    \n                    // Calculate score statistics\n                    const scoreMean = scoreValues.reduce((sum, val) => sum + val, 0) / scoreValues.length;\n                    const scoreVariance = scoreValues.reduce((sum, val) => sum + Math.pow(val - scoreMean, 2), 0) / scoreValues.length;\n                    const scoreStdDev = Math.sqrt(scoreVariance);\n                    const scoreCI = 1.96 * (scoreStdDev / Math.sqrt(scoreValues.length));\n                    \n                    // Calculate accuracy statistics\n                    const accuracyMean = accuracyValues.reduce((sum, val) => sum + val, 0) / accuracyValues.length;\n                    const accuracyVariance = accuracyValues.reduce((sum, val) => sum + Math.pow(val - accuracyMean, 2), 0) / accuracyValues.length;\n                    const accuracyStdDev = Math.sqrt(accuracyVariance);\n                    const accuracyCI = 1.96 * (accuracyStdDev / Math.sqrt(accuracyValues.length));\n                    \n                    return (\n                      <div className=\"trend-statistics\">\n                        <div className=\"trend-stat\">\n                          <div className=\"trend-stat-value\">{scoreMean.toFixed(1)}</div>\n                          <div className=\"trend-stat-label\">Mean Score</div>\n                        </div>\n                        <div className=\"trend-stat\">\n                          <div className=\"trend-stat-value\">±{scoreCI.toFixed(1)}</div>\n                          <div className=\"trend-stat-label\">Score 95% CI</div>\n                        </div>\n                        <div className=\"trend-stat\">\n                          <div className=\"trend-stat-value\">{accuracyMean.toFixed(1)}%</div>\n                          <div className=\"trend-stat-label\">Mean Accuracy</div>\n                        </div>\n                        <div className=\"trend-stat\">\n                          <div className=\"trend-stat-value\">±{accuracyCI.toFixed(1)}%</div>\n                          <div className=\"trend-stat-label\">Accuracy 95% CI</div>\n                        </div>\n                        <div className=\"trend-stat\">\n                          <div className=\"trend-stat-value\">{scoreStdDev.toFixed(1)}</div>\n                          <div className=\"trend-stat-label\">Score Std Dev</div>\n                        </div>\n                        <div className=\"trend-stat\">\n                          <div className=\"trend-stat-value\">{accuracyStdDev.toFixed(1)}%</div>\n                          <div className=\"trend-stat-label\">Accuracy Std Dev</div>\n                        </div>\n                      </div>\n                    );\n                  })()}\n                <div className=\"trend-info\">\n                  <p>This chart shows your performance trend over your {progressData.trendData.dates.length} most recent sessions. Statistics may differ from overall lifetime averages.</p>\n                </div>\n                </div>\n              </div>\n            )}\n            \n            {/* This section has been removed to improve space efficiency */}\n          </div>\n\n          {/* Cohort Comparison Section */}\n          <div className=\"performance-section\">\n            <h3>Comparison with Peers</h3>\n            {progressData.cohortComparison && progressData.cohortComparison.userAccuracy === 0 ? (\n              <p className=\"no-data\">No comparison data available yet. Complete more sessions to see how you compare with peers.</p>\n            ) : (\n              <div className=\"cohort-comparison\">\n                <div className=\"comparison-info\">\n                  <p>See how your performance compares to other students working on similar problems.</p>\n                </div>\n                \n                {/* Combined section for Strongest Metric and Radar Chart */}\n                <div className=\"comparison-container\">\n                  {/* Left side: Performance insights sections */}\n                  <div className=\"performance-insights-column\">\n                    {/* Your Strongest Metric section */}\n                    <div className=\"metric-card strongest-metric-card\">\n                      <div className=\"section-title\">Your Strongest Metric</div>\n                      <div className=\"best-metric-container\">\n                        {(() => {\n                          const bestMetric = findBestMetric();\n                          let metricValue = '';\n                          let metricColor = '#4f46e5';\n                          \n                          if (bestMetric === 'Score') {\n                            metricValue = `${Number(progressData.cohortComparison.userScore).toFixed(2)}/${Number(progressData.cohortComparison.peerMaxScore).toFixed(1)}`;\n                            metricColor = '#4f46e5';\n                          } else if (bestMetric === 'Accuracy') {\n                            metricValue = `${Number(progressData.cohortComparison.userAccuracy).toFixed(2)}%`;\n                            metricColor = '#ffa500';\n                          } else if (bestMetric === 'Speed') {\n                            // Show only the raw speed value (without percentile)\n                            metricValue = `${Number(progressData.cohortComparison.userSpeed).toFixed(0)}s`;\n                            metricColor = '#10b981';\n                          }\n                          \n                          return (\n                            <div className=\"best-metric-highlight\" style={{ color: metricColor }}>\n                              <span className=\"best-metric-name\">{bestMetric}</span>\n                              <span className=\"best-metric-value\">{metricValue}</span>\n                              {bestMetric === 'Speed' && (\n                                <span style={{ fontSize: '0.8rem', marginTop: '5px' }}>\n                                  (lower time is better)\n                                </span>\n                              )}\n                            </div>\n                          );\n                        })()}\n                      </div>\n                      <div className=\"percentile-text\">\n                        {(() => {\n                          const bestMetric = findBestMetric();\n                          let percentile = 0;\n                          \n                          if (bestMetric === 'Score') {\n                            percentile = progressData.cohortComparison.userScorePercentile || \n                              Math.round((progressData.cohortComparison.userScore / progressData.cohortComparison.peerMaxScore) * 100);\n                          } else if (bestMetric === 'Accuracy') {\n                            percentile = progressData.cohortComparison.userAccuracyPercentile || \n                              Math.round((progressData.cohortComparison.userAccuracy / progressData.cohortComparison.peerMaxAccuracy) * 100);\n                          } else if (bestMetric === 'Speed') {\n                            percentile = progressData.cohortComparison.userSpeedPercentile || calculateSpeedPercentile();\n                          }\n                          \n                          return `Your percentile: ${Math.round(percentile)}%`;\n                        })()}\n                      </div>\n                    </div>\n                    \n                    {/* Percentile Ranking card - NEW SECTION */}\n                    <div className=\"metric-card percentile-card\">\n                      <div className=\"section-title\">Your Current Rankings</div>\n                      \n                      <div className=\"percentile-rankings\">\n                        {(() => {\n                          // Get percentiles\n                          const scorePercentile = progressData.cohortComparison.userScorePercentile || \n                            Math.round((progressData.cohortComparison.userScore / progressData.cohortComparison.peerMaxScore) * 100);\n                          \n                          const accuracyPercentile = progressData.cohortComparison.userAccuracyPercentile || \n                            Math.round((progressData.cohortComparison.userAccuracy / progressData.cohortComparison.peerMaxAccuracy) * 100);\n                          \n                          const speedPercentile = progressData.cohortComparison.userSpeedPercentile || \n                            calculateSpeedPercentile();\n                          \n                          return (\n                            <>\n                              {/* Score percentile */}\n                              <div className=\"percentile-item\">\n                                <div className=\"percentile-label\">Score</div>\n                                <div className=\"percentile-bar-container\">\n                                  <div className=\"percentile-bar\" style={{ width: `${scorePercentile}%`, backgroundColor: \"#4f46e5\" }}></div>\n                                </div>\n                                <div className=\"percentile-value\">{Math.round(scorePercentile)}%</div>\n                              </div>\n                              \n                              {/* Accuracy percentile */}\n                              <div className=\"percentile-item\">\n                                <div className=\"percentile-label\">Accuracy</div>\n                                <div className=\"percentile-bar-container\">\n                                  <div className=\"percentile-bar\" style={{ width: `${accuracyPercentile}%`, backgroundColor: \"#ffa500\" }}></div>\n                                </div>\n                                <div className=\"percentile-value\">{Math.round(accuracyPercentile)}%</div>\n                              </div>\n                              \n                              {/* Speed percentile */}\n                              <div className=\"percentile-item\">\n                                <div className=\"percentile-label\">Speed</div>\n                                <div className=\"percentile-bar-container\">\n                                  <div className=\"percentile-bar\" style={{ width: `${speedPercentile}%`, backgroundColor: \"#10b981\" }}></div>\n                                </div>\n                                <div className=\"percentile-value\">{Math.round(speedPercentile)}%</div>\n                              </div>\n                              \n                              <div className=\"percentile-explanation\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                                  <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                                  <line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line>\n                                  <line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line>\n                                </svg>\n                                <span>Percentiles show how you rank compared to peers. Higher is better.</span>\n                              </div>\n                            </>\n                          );\n                        })()}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Right side: Performance Metrics Comparison */}\n                  <div className=\"radar-chart-section\">\n                    <div className=\"section-title\">Performance Metrics Comparison</div>\n                  \n                  <div style={{ alignSelf: 'center', width: '100%', display: 'flex', justifyContent: 'center' }} className=\"radar-chart\">\n                    <svg width=\"100%\" height=\"430\" viewBox=\"-45 0 528 528\" preserveAspectRatio=\"xMidYMid meet\">\n                      {/* Enhancement zone indicator (35% circle) */}\n                      <circle \n                        cx=\"264\" \n                        cy=\"264\" \n                        r={198 * 0.35} \n                        fill=\"rgba(226, 232, 240, 0.25)\" \n                        stroke=\"#e2e8f0\" \n                        strokeWidth=\"1.5\" \n                        strokeDasharray=\"4,3\"\n                      />\n                      \n                      {/* Background circles */}\n                      {[0.25, 0.5, 0.75, 1].map((scale, i) => (\n                        <g key={`bg-circle-${i}`}>\n                          <circle \n                            cx=\"264\" \n                            cy=\"264\" \n                            r={198 * scale} \n                            fill={scale === 0.25 ? \"rgba(226, 232, 240, 0.1)\" : \n                                 scale === 0.5 ? \"rgba(226, 232, 240, 0.15)\" : \n                                 scale === 0.75 ? \"rgba(226, 232, 240, 0.05)\" : \n                                 \"rgba(226, 232, 240, 0.02)\"}\n                            stroke={scale === 1 ? \"#cbd5e1\" : \"#e2e8f0\"} \n                            strokeWidth={scale === 1 ? \"1.5\" : \"1\"} \n                            opacity={scale === 1 ? 0.9 : 0.7} \n                          />\n                          {scale === 0.25 && (\n                            <text x=\"270\" y={264 - (198 * scale)} textAnchor=\"start\" fontSize=\"13\" fill=\"#64748b\" opacity=\"1\" fontWeight=\"600\"\n                              style={{ textShadow: \"0px 0px 3px #ffffff, 0px 0px 3px #ffffff\" }}>\n                              {Math.round(scale * 100)}%\n                            </text>\n                          )}\n                          {scale === 0.5 && (\n                            <text x=\"270\" y={264 - (198 * scale)} textAnchor=\"start\" fontSize=\"13\" fill=\"#64748b\" opacity=\"1\" fontWeight=\"600\"\n                              style={{ textShadow: \"0px 0px 3px #ffffff, 0px 0px 3px #ffffff\" }}>\n                              {Math.round(scale * 100)}%\n                            </text>\n                          )}\n                          {scale === 0.75 && (\n                            <text x=\"270\" y={264 - (198 * scale)} textAnchor=\"start\" fontSize=\"13\" fill=\"#64748b\" opacity=\"1\" fontWeight=\"600\"\n                              style={{ textShadow: \"0px 0px 3px #ffffff, 0px 0px 3px #ffffff\" }}>\n                              {Math.round(scale * 100)}%\n                            </text>\n                          )}\n                          {scale === 1 && (\n                            <text x=\"270\" y={264 - (198 * scale)} textAnchor=\"start\" fontSize=\"13\" fill=\"#64748b\" opacity=\"1\" fontWeight=\"600\"\n                              style={{ textShadow: \"0px 0px 3px #ffffff, 0px 0px 3px #ffffff\" }}>\n                              100%\n                            </text>\n                          )}\n                        </g>\n                      ))}\n                      \n                      {/* Axis lines */}\n                      {[\n                        { label: \"Score\", angle: 0 },\n                        { label: \"Accuracy\", angle: 120 },\n                        { label: \"Speed\", angle: 240 }\n                      ].map((axis, i) => {\n                        const radian = (axis.angle - 90) * (Math.PI / 180);\n                        const x = 264 + 198 * Math.cos(radian);\n                        const y = 264 + 198 * Math.sin(radian);\n                        \n                        // Calculate label position a bit further out\n                        const labelRadian = (axis.angle - 90) * (Math.PI / 180);\n                        const labelDistance = 238; // Standard distance for labels (scaled up from 216)\n                        const maxValueDistance = 260; // Slightly further out for max values (scaled up from 236)\n                        const labelX = 264 + labelDistance * Math.cos(labelRadian);\n                        const labelY = 264 + labelDistance * Math.sin(labelRadian);\n                        \n                        // Calculate position for max value text\n                        const maxLabelX = 264 + maxValueDistance * Math.cos(labelRadian);\n                        const maxLabelY = 264 + maxValueDistance * Math.sin(labelRadian);\n                        \n                        return (\n                          <g key={`axis-${i}`}>\n                            <line \n                              x1=\"264\" \n                              y1=\"264\" \n                              x2={x} \n                              y2={y} \n                              stroke={axis.label === \"Score\" ? \"rgba(79, 70, 229, 0.4)\" :\n                                      axis.label === \"Accuracy\" ? \"rgba(255, 165, 0, 0.4)\" :\n                                      \"rgba(16, 185, 129, 0.4)\"} // Color-coded axes\n                              strokeWidth=\"2.5\" // Thicker stroke\n                            />\n                            <text \n                              x={labelX} \n                              y={labelY} \n                              textAnchor=\"middle\" \n                              dominantBaseline=\"middle\" \n                              className=\"radar-axis-label\"\n                              fill={axis.label === \"Score\" ? \"#4f46e5\" :\n                                    axis.label === \"Accuracy\" ? \"#ffa500\" :\n                                    \"#10b981\"} // Color-coded by metric\n                              style={{ \n                                textShadow: \"0px 0px 4px #ffffff, 0px 0px 5px rgba(255,255,255,0.9)\",\n                                fontWeight: \"bold\"\n                              }}\n                            >\n                              {axis.label}\n                            </text>\n                            \n                            {/* Add max value labels below the axis labels, outside the circle */}\n                            <text \n                              x={maxLabelX} \n                              y={maxLabelY + 8} \n                              textAnchor=\"middle\" \n                              fontSize=\"11\" \n                              fill=\"#64748b\"\n                              className=\"radar-axis-value\"\n                              style={{\n                                fontStyle: \"italic\",\n                                textShadow: \"0px 0px 4px #ffffff, 0px 0px 4px #ffffff\"\n                              }}\n                            >\n                              {axis.label === \"Speed\" \n                                ? `(peer best: ${Number(progressData.cohortComparison.peerMaxSpeed).toFixed(0)}s)` \n                                : axis.label === \"Accuracy\" \n                                  ? `(max: ${Number(progressData.cohortComparison.peerMaxAccuracy).toFixed(2)}%)`\n                                  : `(max: ${Number(progressData.cohortComparison.peerMaxScore).toFixed(2)})`\n                              }\n                            </text>\n                          </g>\n                        );\n                      })}\n                      \n                      {/* \n                        Peer maximum area - actual peer values\n                        This area visualizes the best performance among peers at their absolute scale.\n                        Important: These values should be displayed at their actual percentages, not scaled to 100%.\n                        For example:\n                        - If the peer best accuracy is 24%, it should appear at 24% of the chart radius\n                        - If the peer best score is 45/100, it should appear at 45% of the chart radius\n                        \n                        The calculation below:\n                        1. Takes the peer max values directly from the API response\n                        2. Calculates the ratio relative to the theoretical maximum (100%)\n                        3. Uses these absolute ratios to position the triangle vertices\n                      */}\n                      <path \n                        d={(() => {\n                          const scoreAngle = -90 * (Math.PI / 180);\n                          const accuracyAngle = (120 - 90) * (Math.PI / 180);\n                          const speedAngle = (240 - 90) * (Math.PI / 180);\n                          \n                          // Calculate peer maximum values as actual percentage values (not scaled to 100%)\n                          // This shows the absolute values rather than relative ones\n                          const peerScoreRatio = progressData.cohortComparison.peerMaxScore / 100;\n                          const peerAccuracyRatio = progressData.cohortComparison.peerMaxAccuracy / 100;\n                          \n                          // For speed, calculate based on the backend-provided peer max speed\n                          // Speed is in seconds, lower is better, so we need to convert it to a ratio\n                          const peerSpeedRatio = (() => {\n                            // Get reference values for speed\n                            const bestPossibleSpeed = 5; // Theoretical best (5 seconds per problem)\n                            const worstConsideredSpeed = 60; // Theoretical worst (60 seconds per problem)\n                            const speedRange = worstConsideredSpeed - bestPossibleSpeed;\n                            \n                            // Get the peer's best speed value\n                            const peerSpeed = Number(progressData.cohortComparison.peerMaxSpeed);\n                            \n                            // Clamp the speed value to our considered range\n                            const clampedSpeed = Math.max(bestPossibleSpeed, Math.min(worstConsideredSpeed, peerSpeed));\n                            \n                            // Invert and normalize: \n                            // - A speed of 5s (very fast) should become ~0.9-1.0 (close to max on chart)\n                            // - A speed of 60s (slow) should become ~0.1-0.2 (close to center on chart)\n                            const ratio = (worstConsideredSpeed - clampedSpeed) / speedRange;\n                            console.log(`Peer speed: ${peerSpeed}s, normalized ratio: ${ratio.toFixed(2)}`);\n                            return ratio;\n                          })();\n                          \n                          // Log the actual percentages used for drawing the peer triangle\n                          console.log('Peer triangle values (absolute percentages):', {\n                            score: `${(peerScoreRatio * 100).toFixed(1)}% (${progressData.cohortComparison.peerMaxScore} / 100)`,\n                            accuracy: `${(peerAccuracyRatio * 100).toFixed(1)}% (${progressData.cohortComparison.peerMaxAccuracy}%)`,\n                            speed: `${(peerSpeedRatio * 100).toFixed(1)}% (${progressData.cohortComparison.peerMaxSpeed}s)`\n                          });\n                          \n                          // Use actual ratio values directly for absolute scaling\n                          const scoreX = 264 + 198 * peerScoreRatio * Math.cos(scoreAngle);\n                          const scoreY = 264 + 198 * peerScoreRatio * Math.sin(scoreAngle);\n                          \n                          const accuracyX = 264 + 198 * peerAccuracyRatio * Math.cos(accuracyAngle);\n                          const accuracyY = 264 + 198 * peerAccuracyRatio * Math.sin(accuracyAngle);\n                          \n                          const speedX = 264 + 198 * peerSpeedRatio * Math.cos(speedAngle);\n                          const speedY = 264 + 198 * peerSpeedRatio * Math.sin(speedAngle);\n                          \n                          return `M ${scoreX} ${scoreY} L ${accuracyX} ${accuracyY} L ${speedX} ${speedY} Z`;\n                        })()}\n                        fill=\"rgba(148, 163, 184, 0.2)\"\n                        stroke=\"#94a3b8\"\n                        strokeWidth=\"2\"\n                        strokeLinejoin=\"round\"\n                      />\n                      \n                      {/* 100% border line connecting all axes - Theoretical Maximum */}\n                      <path\n                        d={(() => {\n                          const scoreAngle = -90 * (Math.PI / 180);\n                          const accuracyAngle = (120 - 90) * (Math.PI / 180);\n                          const speedAngle = (240 - 90) * (Math.PI / 180);\n                          \n                          // Calculate points at 100% for each axis\n                          const scoreX = 264 + 198 * Math.cos(scoreAngle);\n                          const scoreY = 264 + 198 * Math.sin(scoreAngle);\n                          const accuracyX = 264 + 198 * Math.cos(accuracyAngle);\n                          const accuracyY = 264 + 198 * Math.sin(accuracyAngle);\n                          const speedX = 264 + 198 * Math.cos(speedAngle);\n                          const speedY = 264 + 198 * Math.sin(speedAngle);\n                          \n                          // Create a closed path connecting all three points\n                          return `M ${scoreX} ${scoreY} L ${accuracyX} ${accuracyY} L ${speedX} ${speedY} Z`;\n                        })()}\n                        fill=\"rgba(229, 62, 62, 0.05)\"\n                        stroke=\"#e53e3e\" \n                        strokeWidth=\"2.5\"\n                        strokeLinejoin=\"round\"\n                      />\n                      \n                      {/* 100% point markers */}\n                      {(() => {\n                        const angles = [\n                          { label: \"Score\", angle: -90 * (Math.PI / 180) },\n                          { label: \"Accuracy\", angle: (120 - 90) * (Math.PI / 180) },\n                          { label: \"Speed\", angle: (240 - 90) * (Math.PI / 180) }\n                        ];\n                        \n                        return angles.map((item, i) => {\n                          const x = 264 + 198 * Math.cos(item.angle);\n                          const y = 264 + 198 * Math.sin(item.angle);\n                          \n                          // Position for the 100% label\n                          const labelX = 264 + 213 * Math.cos(item.angle);\n                          const labelY = 264 + 213 * Math.sin(item.angle);\n                          \n                          return (\n                            <g key={`max-point-${i}`}>\n                              <circle \n                                cx={x} \n                                cy={y} \n                                r=\"5\" \n                                fill=\"#e53e3e\" \n                              />\n                              <circle \n                                cx={x} \n                                cy={y} \n                                r=\"3\" \n                                fill=\"#fff\" \n                              />\n                            </g>\n                          );\n                        });\n                      })()}\n                      \n                      {/* User performance area */}\n                      <path \n                        d={(() => {\n                          const scoreAngle = -90 * (Math.PI / 180);\n                          const accuracyAngle = (120 - 90) * (Math.PI / 180);\n                          const speedAngle = (240 - 90) * (Math.PI / 180);\n                          \n                          // Calculate relative positions for Option 1 (all axes extend to 100%)\n                          // For score and accuracy, we compare to 100 as the theoretical maximum\n                          // For speed, we use the percentile which is already on a 0-100 scale\n                          const scoreRatio = progressData.cohortComparison.userScore / 100; // Compare to theoretical maximum of 100\n                          const accuracyRatio = progressData.cohortComparison.userAccuracy / 100; // Already on 0-100 scale\n                          \n                          // For speed, calculate the percentile (higher is better)\n                          const normalizedUserSpeed = calculateSpeedPercentile() / 100;\n                          \n                          // Log calculated ratios for debugging\n                          console.log('User Radar Chart Ratios (before scaling):', {\n                            score: `${(scoreRatio * 100).toFixed(1)}% (${progressData.cohortComparison.userScore} / 100)`,\n                            accuracy: `${(accuracyRatio * 100).toFixed(1)}% (${progressData.cohortComparison.userAccuracy}%)`,\n                            speed: `${(normalizedUserSpeed * 100).toFixed(1)}% (${progressData.cohortComparison.userSpeed}s, ${calculateSpeedPercentile().toFixed(1)} percentile)`\n                          });\n                          \n                          // Apply a minimum scale factor to ensure metrics are visible\n                          // This \"pulls\" small values away from the center for better visibility\n                          // Reduced from 0.35 to 0.05 to show more accurate percentages\n                          const minScaleFactor = 0.05;\n                          const enhancedScoreRatio = minScaleFactor + (1 - minScaleFactor) * scoreRatio;\n                          const enhancedAccuracyRatio = minScaleFactor + (1 - minScaleFactor) * accuracyRatio;\n                          const enhancedSpeedRatio = minScaleFactor + (1 - minScaleFactor) * normalizedUserSpeed;\n                          \n                          const scoreX = 264 + 198 * enhancedScoreRatio * Math.cos(scoreAngle);\n                          const scoreY = 264 + 198 * enhancedScoreRatio * Math.sin(scoreAngle);\n                          \n                          const accuracyX = 264 + 198 * enhancedAccuracyRatio * Math.cos(accuracyAngle);\n                          const accuracyY = 264 + 198 * enhancedAccuracyRatio * Math.sin(accuracyAngle);\n                          \n                          const speedX = 264 + 198 * enhancedSpeedRatio * Math.cos(speedAngle);\n                          const speedY = 264 + 198 * enhancedSpeedRatio * Math.sin(speedAngle);\n                          \n                          return `M ${scoreX} ${scoreY} L ${accuracyX} ${accuracyY} L ${speedX} ${speedY} Z`;\n                        })()}\n                        fill=\"rgba(79, 70, 229, 0.45)\" // Increased opacity for better visibility\n                        stroke=\"#4f46e5\"\n                        strokeWidth=\"2.5\" // Slightly thicker stroke\n                      />\n                      \n                      {/* User performance points */}\n                      {(() => {\n                        const scoreAngle = -90 * (Math.PI / 180);\n                        const accuracyAngle = (120 - 90) * (Math.PI / 180);\n                        const speedAngle = (240 - 90) * (Math.PI / 180);\n                        \n                        // For Option 1, calculate relative positions based on theoretical maximums\n                        // Score - compare to max possible score of 100\n                        // Accuracy - already on a 0-100 scale\n                        // Speed - use percentile which is already normalized to 0-100\n                        const scoreRatio = progressData.cohortComparison.userScore / 100;\n                        const accuracyRatio = progressData.cohortComparison.userAccuracy / 100;\n                        const normalizedUserSpeed = calculateSpeedPercentile() / 100;\n                        \n                        // Apply minimum scale factor for better visibility\n                        // Reduced from 0.35 to 0.05 to show more accurate percentages\n                        const minScaleFactor = 0.05;\n                        const enhancedScoreRatio = minScaleFactor + (1 - minScaleFactor) * scoreRatio;\n                        const enhancedAccuracyRatio = minScaleFactor + (1 - minScaleFactor) * accuracyRatio;\n                        const enhancedSpeedRatio = minScaleFactor + (1 - minScaleFactor) * normalizedUserSpeed;\n                        \n                        const scoreX = 264 + 198 * enhancedScoreRatio * Math.cos(scoreAngle);\n                        const scoreY = 264 + 198 * enhancedScoreRatio * Math.sin(scoreAngle);\n                        \n                        const accuracyX = 264 + 198 * enhancedAccuracyRatio * Math.cos(accuracyAngle);\n                        const accuracyY = 264 + 198 * enhancedAccuracyRatio * Math.sin(accuracyAngle);\n                        \n                        const speedX = 264 + 198 * enhancedSpeedRatio * Math.cos(speedAngle);\n                        const speedY = 264 + 198 * enhancedSpeedRatio * Math.sin(speedAngle);\n                        \n                        // Calculate which metric is the student's strongest\n                        let bestMetricIndex = 0;\n                        let metrics = [\n                          { ratio: scoreRatio, index: 0, name: 'Score' },\n                          { ratio: accuracyRatio, index: 1, name: 'Accuracy' },\n                          { ratio: normalizedUserSpeed, index: 2, name: 'Speed' }\n                        ];\n                        \n                        // Sort metrics by their ratio values (descending)\n                        const sortedMetrics = [...metrics].sort((a, b) => b.ratio - a.ratio);\n                        bestMetricIndex = sortedMetrics[0].index;\n                        \n                        // Log the metric rankings for debugging\n                        console.log('Radar Chart Metric Rankings:', sortedMetrics.map(m => `${m.name}: ${(m.ratio * 100).toFixed(2)}%`).join(', '));\n                        \n                        return [\n                          { \n                            x: scoreX, \n                            y: scoreY, \n                            label: \"Score\", \n                            value: `${Number(progressData.cohortComparison.userScore).toFixed(2)}`, \n                            max: `${Number(progressData.cohortComparison.peerMaxScore).toFixed(2)}`,\n                            isBest: bestMetricIndex === 0 \n                          },\n                          { \n                            x: accuracyX, \n                            y: accuracyY, \n                            label: \"Accuracy\", \n                            value: `${Number(progressData.cohortComparison.userAccuracy).toFixed(2)}%`, \n                            max: `${Number(progressData.cohortComparison.peerMaxAccuracy).toFixed(2)}%`,\n                            isBest: bestMetricIndex === 1 \n                          },\n                          { \n                            x: speedX, \n                            y: speedY, \n                            label: \"Speed\", \n                            value: `${Number(progressData.cohortComparison.userSpeed).toFixed(0)}s`, \n                            max: `${Number(progressData.cohortComparison.peerMaxSpeed).toFixed(0)}s`,\n                            percentile: Math.max(0, Math.round(calculateSpeedPercentile())),\n                            isBest: bestMetricIndex === 2 \n                          }\n                        ].map((point, i) => (\n                          <g key={`point-${i}`}>\n                            {/* Value background */}\n                            <rect\n                              x={point.x - 28}\n                              y={point.y - 30}\n                              width=\"56\" // Even wider for more space\n                              height=\"24\" // Taller for better visibility\n                              rx=\"6\" \n                              ry=\"6\"\n                              fill={point.isBest ? \"rgba(16, 185, 129, 0.25)\" : \n                                   point.label === \"Score\" ? \"rgba(79, 70, 229, 0.25)\" :\n                                   point.label === \"Accuracy\" ? \"rgba(255, 165, 0, 0.25)\" :\n                                   \"rgba(16, 185, 129, 0.25)\"} // Color-code by metric\n                              stroke={point.isBest ? \"#10b981\" : \n                                     point.label === \"Score\" ? \"#4f46e5\" :\n                                     point.label === \"Accuracy\" ? \"#ffa500\" :\n                                     \"#10b981\"}\n                              strokeWidth={point.isBest ? \"1.5\" : \"1\"}\n                              style={{\n                                filter: point.isBest ? \"drop-shadow(0px 0px 4px rgba(16, 185, 129, 0.6))\" : \n                                        \"drop-shadow(0px 0px 2px rgba(0, 0, 0, 0.1))\",\n                                opacity: 0.95\n                              }}\n                            />\n                            \n                            {/* Highlight the best metric with a different color */}\n                            <circle \n                              cx={point.x} \n                              cy={point.y} \n                              r=\"8\" // Larger for better visibility\n                              fill={point.isBest ? \"#10b981\" : \n                                   point.label === \"Score\" ? \"#4f46e5\" :\n                                   point.label === \"Accuracy\" ? \"#ffa500\" :\n                                   \"#10b981\"} // Color-code by metric\n                            />\n                            <circle \n                              cx={point.x} \n                              cy={point.y} \n                              r=\"5\" // Larger for better visibility\n                              fill=\"#fff\" \n                            />\n                            \n                            {/* Display the metric name and value */}\n                            <text \n                              x={point.x} \n                              y={point.y - 18} \n                              textAnchor=\"middle\" \n                              className=\"radar-metric-value\"\n                              fill={point.isBest ? \"#10b981\" : \n                                   point.label === \"Score\" ? \"#4f46e5\" :\n                                   point.label === \"Accuracy\" ? \"#ffa500\" :\n                                   \"#10b981\"} // Color-code by metric\n                              style={{\n                                textShadow: \"0px 0px 5px #fff, 0px 0px 5px #fff\",\n                                fontWeight: \"700\",\n                                letterSpacing: \"0.2px\"\n                              }}\n                            >\n                              {point.value}\n                            </text>\n                            \n                            {/* Add a star or badge for the best metric */}\n                            {point.isBest && (\n                              <g>\n                                <rect\n                                  x={point.x + 16}\n                                  y={point.y - 30}\n                                  width=\"18\"\n                                  height=\"18\"\n                                  rx=\"9\"\n                                  ry=\"9\"\n                                  fill=\"#10b981\"\n                                  style={{\n                                    filter: \"drop-shadow(0px 0px 3px rgba(16, 185, 129, 0.8))\"\n                                  }}\n                                />\n                                <text\n                                  x={point.x + 25}\n                                  y={point.y - 20}\n                                  textAnchor=\"middle\"\n                                  fontSize=\"12\"\n                                  fontWeight=\"bold\"\n                                  fill=\"white\"\n                                  style={{\n                                    textShadow: \"0px 0px 1px rgba(0,0,0,0.3)\"\n                                  }}\n                                >\n                                  ★\n                                </text>\n                              </g>\n                            )}\n                          </g>\n                        ));\n                      })()}\n                      \n                      {/* Center point and label */}\n                      <circle cx=\"264\" cy=\"264\" r=\"4\" fill=\"#64748b\" />\n                      <circle cx=\"264\" cy=\"264\" r=\"8\" fill=\"rgba(100, 116, 139, 0.2)\" stroke=\"#64748b\" strokeWidth=\"1\" />\n                    </svg>\n                  </div>\n                  \n                  <div style={{ alignSelf: 'flex-start', width: '100%' }} className=\"radar-legend\">\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"rgba(79, 70, 229, 0.45)\", border: \"2px solid #4f46e5\" }}></div>\n                      <div className=\"legend-label\">Your Performance</div>\n                    </div>\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"rgba(148, 163, 184, 0.2)\", border: \"2px solid #94a3b8\" }}></div>\n                      <div className=\"legend-label\">Peer Best Values</div>\n                    </div>\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"rgba(229, 62, 62, 0.05)\", border: \"2px solid #e53e3e\" }}></div>\n                      <div className=\"legend-label\">Theoretical Maximum (100%)</div>\n                    </div>\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"#10b981\" }}></div>\n                      <div className=\"legend-label\">Your Best Metric</div>\n                    </div>\n                  </div>\n\n                  <div className=\"spacer-between-sections\"></div>\n                  \n\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Difficulty Performance Section */}\n          <div className=\"performance-section\">\n            <h3>Performance by Difficulty</h3>\n            <div className=\"difficulty-chart-container\">\n              <div className=\"difficulty-chart\">\n                {Object.entries(progressData.difficultyPerformance).map(([difficulty, data]) => (\n                  <div key={difficulty} className={`difficulty-bar difficulty-${difficulty.toLowerCase()}`}>\n                    <div className=\"difficulty-label\">{difficulty}</div>\n                    <div className=\"bar-container\">\n                      <div \n                        className=\"bar-fill\" \n                        style={{ width: `${data.accuracy}%` }}\n                      ></div>\n                      <div className=\"bar-text\">{formatAccuracy(data.accuracy)}</div>\n                    </div>\n                    <div className=\"attempt-info\">\n                      {data.correct}/{data.attempted} correct\n                    </div>\n                    <div className=\"donut-chart-container\">\n                      <svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\">\n                        {/* Background circle */}\n                        <circle \n                          cx=\"30\" \n                          cy=\"30\" \n                          r=\"25\" \n                          fill=\"none\" \n                          stroke=\"#e2e8f0\" \n                          strokeWidth=\"8\"\n                        />\n                        \n                        {/* Foreground circle - the progress */}\n                        <circle \n                          cx=\"30\" \n                          cy=\"30\" \n                          r=\"25\" \n                          fill=\"none\" \n                          stroke={difficulty === \"Easy\" ? \"#10b981\" : difficulty === \"Medium\" ? \"#f59e0b\" : \"#ef4444\"} \n                          strokeWidth=\"8\"\n                          strokeDasharray={`${(data.accuracy / 100) * 157} 157`} \n                          strokeDashoffset=\"0\" \n                          transform=\"rotate(-90 30 30)\"\n                        />\n                        \n                        {/* Center text */}\n                        <text \n                          x=\"30\" \n                          y=\"30\" \n                          textAnchor=\"middle\" \n                          dominantBaseline=\"middle\" \n                          fontSize=\"14\" \n                          fontWeight=\"bold\"\n                          fill=\"#334155\"\n                        >\n                          {Math.round(data.accuracy)}%\n                        </text>\n                      </svg>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"difficulty-summary\">\n                <div className=\"difficulty-stats\">\n                  <div className=\"difficulty-stat-item\">\n                    <div className=\"difficulty-stat-value\">\n                      {Object.values(progressData.difficultyPerformance).reduce((total, data) => total + data.attempted, 0)}\n                    </div>\n                    <div className=\"difficulty-stat-label\">Total Problems</div>\n                  </div>\n                  <div className=\"difficulty-stat-item\">\n                    <div className=\"difficulty-stat-value\">\n                      {Math.round(Object.values(progressData.difficultyPerformance).reduce((sum, data) => {\n                        return data.attempted > 0 ? sum + (data.accuracy * data.attempted) : sum;\n                      }, 0) / Object.values(progressData.difficultyPerformance).reduce((total, data) => total + data.attempted, 0) || 0)}%\n                    </div>\n                    <div className=\"difficulty-stat-label\">Avg. Accuracy</div>\n                  </div>\n                </div>\n                <div className=\"difficulty-info\">\n                  <p>This chart shows your performance across different difficulty levels. The circles indicate your accuracy percentage for each difficulty level.</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Topic Performance Section */}\n          <div className=\"performance-section\">\n            <h3>Performance by Topic</h3>\n            <div className=\"topic-visualization-container\">\n              <div className=\"topic-chart\">\n                {Object.entries(progressData.topicPerformance)\n                  .sort((a, b) => b[1].attempted - a[1].attempted) // Sort by most attempted\n                  .slice(0, 6) // Show top 6 most attempted topics\n                  .map(([topic, data], index) => (\n                    <div key={topic} className=\"topic-row\">\n                      <div className=\"topic-name\">{topic}</div>\n                      <div className=\"bar-container\">\n                        <div \n                          className=\"bar-fill\" \n                          style={{ \n                            width: `${data.accuracy}%`,\n                            background: `linear-gradient(90deg, \n                              ${index % 3 === 0 ? '#4f46e5' : index % 3 === 1 ? '#0ea5e9' : '#8b5cf6'}, \n                              ${index % 3 === 0 ? '#818cf8' : index % 3 === 1 ? '#38bdf8' : '#a78bfa'})`\n                          }}\n                        ></div>\n                        <div className=\"bar-text\">{formatAccuracy(data.accuracy)}</div>\n                      </div>\n                      <div className=\"attempt-info\">\n                        {data.correct}/{data.attempted}\n                      </div>\n                    </div>\n                  ))\n                }\n              </div>\n              \n              <div className=\"topic-circular-visualization\">\n                <div className=\"circular-chart-container\">\n                  <svg width=\"300\" height=\"300\" viewBox=\"0 0 300 300\">\n                    {/* Center circle */}\n                    <circle cx=\"150\" cy=\"150\" r=\"25\" fill=\"#f8fafc\" stroke=\"#e2e8f0\" strokeWidth=\"1\" />\n                    \n                    {/* Center text */}\n                    <text x=\"150\" y=\"150\" textAnchor=\"middle\" dominantBaseline=\"middle\" fontSize=\"12\" fill=\"#64748b\">Topics</text>\n                    \n                    {/* Draw topic segments */}\n                    {Object.entries(progressData.topicPerformance)\n                      .sort((a, b) => b[1].attempted - a[1].attempted) // Sort by most attempted\n                      .slice(0, 8) // Show top 8 topics in the circular chart\n                      .map(([topic, data], index, array) => {\n                        const segmentAngle = (2 * Math.PI) / array.length;\n                        const startAngle = index * segmentAngle - Math.PI / 2;\n                        const endAngle = startAngle + segmentAngle;\n                        \n                        // Calculate inner and outer radius based on accuracy\n                        const minRadius = 30; // Minimum radius\n                        const maxRadius = 120; // Maximum radius\n                        const innerRadius = minRadius;\n                        const outerRadius = minRadius + ((maxRadius - minRadius) * data.accuracy / 100);\n                        \n                        // Calculate points for the segment\n                        const innerStartX = 150 + innerRadius * Math.cos(startAngle);\n                        const innerStartY = 150 + innerRadius * Math.sin(startAngle);\n                        const innerEndX = 150 + innerRadius * Math.cos(endAngle);\n                        const innerEndY = 150 + innerRadius * Math.sin(endAngle);\n                        \n                        const outerStartX = 150 + outerRadius * Math.cos(startAngle);\n                        const outerStartY = 150 + outerRadius * Math.sin(startAngle);\n                        const outerEndX = 150 + outerRadius * Math.cos(endAngle);\n                        const outerEndY = 150 + outerRadius * Math.sin(endAngle);\n                        \n                        // Generate path for the segment\n                        const path = [\n                          `M ${innerStartX} ${innerStartY}`,\n                          `L ${outerStartX} ${outerStartY}`,\n                          `A ${outerRadius} ${outerRadius} 0 0 1 ${outerEndX} ${outerEndY}`,\n                          `L ${innerEndX} ${innerEndY}`,\n                          `A ${innerRadius} ${innerRadius} 0 0 0 ${innerStartX} ${innerStartY}`,\n                          'Z'\n                        ].join(' ');\n                        \n                        // Calculate position for the label\n                        const labelRadius = outerRadius + 15;\n                        const midAngle = startAngle + segmentAngle / 2;\n                        const labelX = 150 + labelRadius * Math.cos(midAngle);\n                        const labelY = 150 + labelRadius * Math.sin(midAngle);\n                        \n                        // Choose colors based on index\n                        const colors = [\n                          ['#4f46e5', '#818cf8'], // Indigo\n                          ['#0ea5e9', '#38bdf8'], // Sky\n                          ['#8b5cf6', '#a78bfa'], // Violet\n                          ['#10b981', '#34d399'], // Emerald\n                          ['#f59e0b', '#fbbf24'], // Amber\n                          ['#ef4444', '#f87171'], // Red\n                          ['#ec4899', '#f472b6'], // Pink\n                          ['#8b5cf6', '#a78bfa']  // Violet (repeat)\n                        ];\n                        \n                        return (\n                          <g key={topic}>\n                            {/* Segment */}\n                            <path \n                              d={path} \n                              fill={`url(#gradient-${index})`}\n                              stroke=\"#ffffff\" \n                              strokeWidth=\"1\"\n                            />\n                            \n                            {/* Define gradient */}\n                            <defs>\n                              <linearGradient id={`gradient-${index}`} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                                <stop offset=\"0%\" stopColor={colors[index % colors.length][0]} />\n                                <stop offset=\"100%\" stopColor={colors[index % colors.length][1]} />\n                              </linearGradient>\n                            </defs>\n                            \n                            {/* Topic name label */}\n                            <text \n                              x={labelX} \n                              y={labelY} \n                              textAnchor={midAngle > -Math.PI/2 && midAngle < Math.PI/2 ? \"start\" : \"end\"}\n                              dominantBaseline=\"middle\" \n                              fontSize=\"10\" \n                              fill=\"#334155\"\n                              fontWeight=\"500\"\n                            >\n                              {topic.length > 12 ? topic.substring(0, 10) + \"...\" : topic}\n                            </text>\n                            \n                            {/* Draw line from segment to label */}\n                            <line \n                              x1={150 + outerRadius * Math.cos(midAngle)} \n                              y1={150 + outerRadius * Math.sin(midAngle)} \n                              x2={150 + (labelRadius - 10) * Math.cos(midAngle)} \n                              y2={150 + (labelRadius - 10) * Math.sin(midAngle)} \n                              stroke=\"#94a3b8\" \n                              strokeWidth=\"1\" \n                              strokeDasharray=\"2 2\"\n                            />\n                            \n                            {/* Small circle to indicate accuracy percentage */}\n                            <circle \n                              cx={150 + (outerRadius * 0.7) * Math.cos(midAngle)} \n                              cy={150 + (outerRadius * 0.7) * Math.sin(midAngle)} \n                              r=\"10\" \n                              fill=\"#ffffff\"\n                              stroke={colors[index % colors.length][0]}\n                              strokeWidth=\"1\"\n                            />\n                            \n                            {/* Accuracy percentage text */}\n                            <text \n                              x={150 + (outerRadius * 0.7) * Math.cos(midAngle)} \n                              y={150 + (outerRadius * 0.7) * Math.sin(midAngle)} \n                              textAnchor=\"middle\" \n                              dominantBaseline=\"middle\" \n                              fontSize=\"8\"\n                              fontWeight=\"bold\"\n                              fill=\"#334155\"\n                            >\n                              {Math.round(data.accuracy)}%\n                            </text>\n                          </g>\n                        );\n                      })\n                    }\n                  </svg>\n                </div>\n                \n                <div className=\"topic-summary\">\n                  <div className=\"topic-stats\">\n                    <div className=\"topic-stat-item\">\n                      <div className=\"topic-stat-value\">\n                        {Object.keys(progressData.topicPerformance).length}\n                      </div>\n                      <div className=\"topic-stat-label\">Topics Attempted</div>\n                    </div>\n                    <div className=\"topic-stat-item\">\n                      <div className=\"topic-stat-value\">\n                        {Object.entries(progressData.topicPerformance || {}).length > 0\n                          ? Object.entries(progressData.topicPerformance)\n                              .sort((a, b) => b[1].accuracy - a[1].accuracy)[0][0]\n                          : \"N/A\"}\n                      </div>\n                      <div className=\"topic-stat-label\">Strongest Topic</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"topic-info\">\n                    <p>This visualization shows your performance across different mathematical topics. \n                    The length of each segment represents your accuracy in that topic.</p>\n                    {Object.keys(progressData.topicPerformance).length > 8 && (\n                      <div className=\"more-topics-info\">\n                        + {Object.keys(progressData.topicPerformance).length - 8} more topics not shown in the circular chart\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Recent Sessions Section */}\n          <div className=\"performance-section\">\n            <h3>Recent Sessions</h3>\n            <div className=\"recent-sessions\">\n              {progressData.recentSessions.length === 0 ? (\n                <p className=\"no-data\">No recent sessions found.</p>\n              ) : (\n                <table className=\"sessions-table\">\n                  <thead>\n                    <tr>\n                      <th>Date</th>\n                      <th>Contest</th>\n                      <th>Mode</th>\n                      <th>Score</th>\n                      <th>Accuracy</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {progressData.recentSessions.map((session, index) => (\n                      <tr key={index}>\n                        <td>{formatDate(session.completedAt)}</td>\n                        <td>{session.contest} {session.year}</td>\n                        <td>{session.mode}</td>\n                        <td>{session.score}/{session.totalAttempted}</td>\n                        <td>{formatAccuracy(session.accuracy)}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              )}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ProgressTracking;\n"],"names":["_ref","username","loading","setLoading","useState","error","setError","progressData","setProgressData","topicPerformance","difficultyPerformance","overallPerformance","totalSessions","totalProblems","averageScore","accuracyPercentage","averageSpeed","recentSessions","trendData","accuracy","score","dates","cohortComparison","userScore","userAccuracy","userSpeed","peerMaxScore","peerMaxAccuracy","peerMaxSpeed","userScorePercentile","userAccuracyPercentile","userSpeedPercentile","useEffect","async","console","log","testResponse","fetch","ok","cohortResponse","axios","get","data","response","success","JSON","stringify","Object","keys","length","warn","cohortError","isNaN","fetchProgressData","useEffectDebug","formatAccuracy","Math","round","calculateSpeedPercentile","Number","slowFactor","min","max","speedPercentile","toFixed","findBestMetric","bestMetric","sortedMetrics","name","value","sort","a","b","forEach","metric","index","formatDate","dateString","Date","toLocaleDateString","undefined","year","month","day","e","_jsxs","className","children","_jsx","Link","to","_Fragment","width","height","viewBox","preserveAspectRatio","x","y","fill","rx","ry","x1","y1","x2","y2","stroke","strokeWidth","maxScore","scoreStep","ceil","scoreLabels","map","tick","i","textAnchor","alignmentBaseline","fontSize","strokeDasharray","d","reduce","path","arr","dataLength","strokeLinecap","strokeLinejoin","scoreValues","sum","val","mean","variance","pow","confidenceFactor","sqrt","upperCI","lowerCI","upperY","lowerY","accuracyValues","cx","cy","r","date","floor","transform","fontWeight","style","backgroundColor","opacity","margin","backgroundImage","backgroundSize","scoreMean","scoreVariance","scoreStdDev","scoreCI","accuracyMean","accuracyVariance","accuracyStdDev","accuracyCI","metricValue","metricColor","color","marginTop","percentile","scorePercentile","accuracyPercentile","xmlns","alignSelf","display","justifyContent","scale","textShadow","label","angle","axis","radian","PI","cos","sin","labelRadian","labelX","labelY","maxLabelX","maxLabelY","dominantBaseline","fontStyle","scoreAngle","accuracyAngle","speedAngle","peerScoreRatio","peerAccuracyRatio","peerSpeedRatio","peerSpeed","ratio","worstConsideredSpeed","speed","item","scoreRatio","accuracyRatio","normalizedUserSpeed","minScaleFactor","enhancedScoreRatio","enhancedAccuracyRatio","enhancedSpeedRatio","scoreX","scoreY","accuracyX","accuracyY","speedX","speedY","bestMetricIndex","m","join","isBest","point","filter","letterSpacing","border","entries","_ref2","difficulty","toLowerCase","correct","attempted","strokeDashoffset","values","total","slice","_ref3","topic","background","_ref4","array","segmentAngle","startAngle","endAngle","innerRadius","outerRadius","innerStartX","innerStartY","innerEndX","innerEndY","labelRadius","midAngle","colors","id","offset","stopColor","substring","session","completedAt","contest","mode","totalAttempted"],"sourceRoot":""}