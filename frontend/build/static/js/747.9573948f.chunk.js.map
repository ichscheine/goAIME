{"version":3,"file":"static/js/747.9573948f.chunk.js","mappings":"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","sources":["components/ProgressTracking.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { useEffect as useEffectDebug } from 'react';\nimport './ProgressTracking.css';\n\nconst ProgressTracking = ({ username }) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [progressData, setProgressData] = useState({\n    topicPerformance: {},\n    difficultyPerformance: {},\n    overallPerformance: {\n      totalSessions: 0,\n      totalProblems: 0,\n      averageScore: 0,\n      accuracyPercentage: 0,\n      averageSpeed: 0\n    },\n    recentSessions: [],\n    trendData: {\n      accuracy: [],\n      score: [],\n      dates: []\n    },\n    cohortComparison: {\n      userScore: 0,\n      userAccuracy: 0,\n      userSpeed: 0,\n      peerMaxScore: 0,\n      peerMaxAccuracy: 0,\n      peerMaxSpeed: 0,\n      userScorePercentile: 0,\n      userAccuracyPercentile: 0,\n      userSpeedPercentile: 0,\n    }\n  });\n\n  useEffect(() => {\n    async function fetchProgressData() {\n      if (!username) return;\n      \n      setLoading(true);\n      setError(null);\n      \n      try {\n        console.log(`Fetching progress data for user: ${username}`);\n        // Test API connection first\n        const testResponse = await fetch('/api/health');\n        console.log('API health check:', testResponse.ok ? 'OK' : 'Failed');\n        \n        // Add logging for goAmy's cohort metrics to diagnose speed issue\n        if (username === 'goamy') {\n          try {\n            const cohortResponse = await axios.get(`/api/cohort/metrics/${username}`);\n            console.log('Cohort metrics response for goAmy:', cohortResponse.data);\n            console.log('User speed from cohort metrics:', cohortResponse.data.data.userSpeed);\n          } catch (error) {\n            console.error('Error fetching cohort metrics:', error);\n          }\n        }\n        \n        // Fetch user progress data from the API\n        const response = await axios.get(`/api/user/progress/${username}`);\n        console.log('Progress data response:', response);\n        \n        if (response.data && response.data.success) {\n          // Log the received data structure to diagnose missing parts\n          console.log('Progress data structure:', JSON.stringify(response.data.data, null, 2));\n          \n          // Check if difficulty and topic data exist\n          if (!response.data.data.difficultyPerformance || Object.keys(response.data.data.difficultyPerformance).length === 0) {\n            console.warn('Missing difficulty performance data');\n            \n            // Add mock data for debugging if needed\n            response.data.data.difficultyPerformance = {\n              \"Easy\": { \"correct\": 25, \"attempted\": 30, \"accuracy\": 83.33 },\n              \"Medium\": { \"correct\": 15, \"attempted\": 20, \"accuracy\": 75.00 },\n              \"Hard\": { \"correct\": 5, \"attempted\": 10, \"accuracy\": 50.00 }\n            };\n          }\n          \n          if (!response.data.data.topicPerformance || Object.keys(response.data.data.topicPerformance).length === 0) {\n            console.warn('Missing topic performance data');\n            \n            // Add mock data for debugging if needed\n            response.data.data.topicPerformance = {\n              \"Algebra\": { \"correct\": 18, \"attempted\": 25, \"accuracy\": 72.00 },\n              \"Geometry\": { \"correct\": 12, \"attempted\": 15, \"accuracy\": 80.00 },\n              \"Number Theory\": { \"correct\": 8, \"attempted\": 10, \"accuracy\": 80.00 },\n              \"Combinatorics\": { \"correct\": 5, \"attempted\": 8, \"accuracy\": 62.50 },\n              \"Probability\": { \"correct\": 2, \"attempted\": 2, \"accuracy\": 100.00 }\n            };\n          }\n          \n          // Add mock data for radar chart if it doesn't exist\n          if (!response.data.data.cohortComparison.userScore) {\n            console.warn('Adding mock data for radar chart');\n            \n            // Use the average score from overall performance for the user score\n            response.data.data.cohortComparison.userScore = response.data.data.overallPerformance.averageScore || 75;\n            \n            // Log if we have cohort metrics data available for debugging\n            console.log('Checking for speed data from API:', response.data.data.cohortComparison);\n            \n            // Get speed directly from the cohort metrics response if available, otherwise use default\n            if (response.data.data.cohortComparison.userSpeed) {\n              console.log('Using actual speed data from API:', response.data.data.cohortComparison.userSpeed);\n            } else {\n              console.warn('No speed data found, using default value');\n              response.data.data.cohortComparison.userSpeed = 45; // Mock speed in seconds\n            }\n            \n            response.data.data.cohortComparison.peerMaxScore = 95; \n            response.data.data.cohortComparison.peerMaxAccuracy = 98;\n            response.data.data.cohortComparison.peerMaxSpeed = 30; // Mock speed in seconds (lower is better)\n            \n            // Also add to overall performance if not there\n            if (!response.data.data.overallPerformance.averageSpeed) {\n              // Use the cohort metrics speed value if it exists\n              if (response.data.data.cohortComparison.userSpeed) {\n                response.data.data.overallPerformance.averageSpeed = response.data.data.cohortComparison.userSpeed;\n                console.log('Setting averageSpeed from cohort metrics:', response.data.data.overallPerformance.averageSpeed);\n              } else {\n                response.data.data.overallPerformance.averageSpeed = 45;\n              }\n            }\n          }\n          \n          setProgressData(response.data.data);\n        } else {\n          setError('Failed to load progress data');\n        }\n      } catch (error) {\n        console.error('Error fetching progress data:', error);\n        setError('Error connecting to server');\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    fetchProgressData();\n  }, [username]);\n  \n  // Debug effect to log state whenever it changes\n  useEffectDebug(() => {\n    console.log('Current progressData state:', progressData);\n  }, [progressData]);\n\n  // Format accuracy percentage with % symbol\n  const formatAccuracy = (accuracy) => {\n    return `${Math.round(accuracy)}%`;\n  };\n\n  // Format speed in seconds to a user-friendly string\n  const formatSpeed = (seconds) => {\n    if (seconds === undefined || seconds === null) {\n      console.warn('Undefined or null seconds value passed to formatSpeed');\n      return '0.00s';\n    }\n    return `${Number(seconds).toFixed(2)}s`;\n  };\n  \n  // Calculate speed percentile (lower is better for speed, but higher percentile is better)\n  const calculateSpeedPercentile = () => {\n    // If userSpeed is 0 or missing data, return a base percentile of 10\n    if (!progressData.cohortComparison.userSpeed || !progressData.cohortComparison.peerMaxSpeed) {\n      console.warn('Missing speed data for percentile calculation:', {\n        userSpeed: progressData.cohortComparison.userSpeed,\n        peerMaxSpeed: progressData.cohortComparison.peerMaxSpeed\n      });\n      return 10; // Return a default low percentile instead of 0\n    }\n    \n    // Get the user's speed and peer max speed\n    const userSpeed = Number(progressData.cohortComparison.userSpeed);\n    const peerMaxSpeed = Number(progressData.cohortComparison.peerMaxSpeed);\n    \n    // Handle edge cases\n    if (userSpeed <= 0) return 100; // Perfect speed (instant) gets 100th percentile\n    if (peerMaxSpeed <= 0) return 20; // Return a modest percentile for edge case\n    \n    // If user speed is greater than peer max speed (slower), cap at 20th percentile\n    if (userSpeed > peerMaxSpeed) {\n      // Calculate a sliding scale from 5-20% based on how much slower\n      const slowFactor = Math.min(3, userSpeed / peerMaxSpeed);\n      return Math.max(5, Math.round(20 - ((slowFactor - 1) * 5)));\n    }\n    \n    // For users faster than peer max, calculate the percentile normally\n    // A lower speed is better, so we invert the ratio\n    const speedPercentile = Math.max(20, Math.min(95, 100 * (1 - (userSpeed / peerMaxSpeed))));\n    \n    // Log for debugging\n    console.log(`Speed Percentile Calculation: userSpeed=${userSpeed}s, peerMaxSpeed=${peerMaxSpeed}s, percentile=${speedPercentile.toFixed(1)}%`);\n    \n    return speedPercentile;\n  };\n  \n  // Determine the user's best metric\n  const findBestMetric = () => {\n    // Calculate ratios for each metric (normalized to 0-100 scale)\n    // For score and accuracy, normalize to 0-100 scale\n    // For speed, we already calculate a percentile where higher is better\n    const scoreRatio = (progressData.cohortComparison.userScore / 100) * 100;\n    const accuracyRatio = progressData.cohortComparison.userAccuracy;\n    // For speed, we calculate a percentile where higher is better\n    const speedPercentile = calculateSpeedPercentile();\n    \n    // Get the best metric based on highest percentile\n    let bestMetric = '';\n    \n    // Create an array of metrics for easier comparison and logging\n    const metrics = [\n      { name: 'Score', value: scoreRatio },\n      { name: 'Accuracy', value: accuracyRatio },\n      { name: 'Speed', value: speedPercentile }\n    ];\n    \n    // Sort metrics by their values (descending)\n    const sortedMetrics = [...metrics].sort((a, b) => b.value - a.value);\n    \n    // Log metric rankings for debugging\n    console.log('Metric Rankings:');\n    sortedMetrics.forEach((metric, index) => {\n      console.log(`  ${index + 1}. ${metric.name}: ${metric.value.toFixed(1)}%`);\n    });\n    \n    // The best metric is the one with the highest value\n    bestMetric = sortedMetrics[0].name;\n    \n    return bestMetric;\n  };\n\n  // Format date in a user-friendly way\n  const formatDate = (dateString) => {\n    try {\n      const date = new Date(dateString);\n      return date.toLocaleDateString(undefined, { \n        year: 'numeric', \n        month: 'short', \n        day: 'numeric' \n      });\n    } catch (e) {\n      return 'Unknown date';\n    }\n  };\n\n  return (\n    <div className=\"progress-tracking-container\">\n      <div className=\"progress-header\">\n        <h2>Your Progress Dashboard</h2>\n        <Link \n          to=\"/dashboard\"\n          className=\"back-to-dashboard\"\n        >\n          Back to Dashboard\n        </Link>\n      </div>\n      {loading ? (\n        <div className=\"progress-loading\">\n          <div className=\"spinner\"></div>\n          <p>Loading your progress data...</p>\n        </div>\n      ) : error ? (\n        <div className=\"progress-error\">\n          <p>{error}</p>\n          <p>Please try again later or contact support if the issue persists.</p>\n        </div>\n      ) : (\n        <>\n          <div className=\"progress-intro\">\n            <p>Track your improvement over time with detailed performance analytics. The more you practice, the more insights you'll see here!</p>\n          </div>\n          \n          <div className=\"progress-overview\">\n            <h3>Overall Performance</h3>\n            <div className=\"overview-stats\">\n              <div className=\"overview-stat\">\n                <div className=\"stat-value\">{progressData.overallPerformance.totalSessions}</div>\n                <div className=\"stat-label\">Total Sessions</div>\n              </div>\n              <div className=\"overview-stat\">\n                <div className=\"stat-value\">{progressData.overallPerformance.totalProblems}</div>\n                <div className=\"stat-label\">Problems Attempted</div>\n              </div>\n              <div className=\"overview-stat\">\n                <div className=\"stat-value\">{progressData.overallPerformance.averageScore.toFixed(1)}</div>\n                <div className=\"stat-label\">Avg. Score</div>\n              </div>              \n              <div className=\"overview-stat\">\n                <div className=\"stat-value\">{formatAccuracy(progressData.overallPerformance.accuracyPercentage)}</div>\n                <div className=\"stat-label\">Accuracy</div>\n              </div>\n              <div className=\"overview-stat\">\n                <div className=\"stat-value\">{Number(progressData.overallPerformance.averageSpeed).toFixed(2)}</div>\n                <div className=\"stat-label\">Avg. Speed(s)</div>\n              </div>            </div>\n          </div>\n\n          {/* Performance Trend Section */}\n          <div className=\"performance-section\">\n            <h3>Performance Trend</h3>\n            {progressData.trendData && progressData.trendData.accuracy && progressData.trendData.accuracy.length === 0 ? (\n              <p className=\"no-data\">No trend data available yet. Complete more sessions to see your progress over time.</p>\n            ) : (\n              <div className=\"trend-chart\">\n                <div className=\"trend-info\">\n                  <p>This chart shows your performance trend over your recent sessions.</p>\n                </div>\n                <div className=\"time-series-chart\">\n                  <svg width=\"100%\" height=\"500\" viewBox=\"0 0 1000 500\" preserveAspectRatio=\"xMidYMid meet\">\n                    {/* Chart background */}\n                    <rect x=\"70\" y=\"40\" width=\"860\" height=\"380\" fill=\"#f8fafc\" rx=\"6\" ry=\"6\" />\n                    \n                    {/* X and Y axes */}\n                    <line x1=\"70\" y1=\"420\" x2=\"930\" y2=\"420\" stroke=\"#cbd5e1\" strokeWidth=\"2\" />\n                    <line x1=\"70\" y1=\"40\" x2=\"70\" y2=\"420\" stroke=\"#cbd5e1\" strokeWidth=\"2\" />\n                    <line x1=\"930\" y1=\"40\" x2=\"930\" y2=\"420\" stroke=\"#cbd5e1\" strokeWidth=\"2\" /> {/* Right y-axis for accuracy */}\n                    \n                    {/* Left Y-axis labels (Score) */}\n                    {progressData.trendData && progressData.trendData.score && progressData.trendData.score.length > 0 && (() => {\n                      const maxScore = Math.max(...progressData.trendData.score);\n                      const scoreStep = Math.ceil(maxScore / 4);\n                      const scoreLabels = [0, scoreStep, scoreStep * 2, scoreStep * 3, scoreStep * 4];\n                      \n                      return scoreLabels.map((tick, i) => (\n                        <g key={`score-tick-${i}`}>\n                          <line \n                            x1=\"65\" \n                            y1={420 - (tick * (380 / (scoreLabels[4] || 1)))} \n                            x2=\"70\" \n                            y2={420 - (tick * (380 / (scoreLabels[4] || 1)))} \n                            stroke=\"#cbd5e1\" \n                            strokeWidth=\"2\" \n                          />\n                          <text \n                            x=\"62\" \n                            y={420 - (tick * (380 / (scoreLabels[4] || 1)))} \n                            textAnchor=\"end\" \n                            alignmentBaseline=\"middle\" \n                            fontSize=\"14\"\n                            fill=\"#64748b\"\n                          >\n                            {tick}\n                          </text>\n                        </g>\n                      ));\n                    })()}\n\n                    {/* Right Y-axis labels (Accuracy) */}\n                    {[0, 25, 50, 75, 100].map((tick, i) => (\n                      <g key={`y-tick-${i}`}>\n                        <line \n                          x1=\"930\" \n                          y1={420 - (tick * 3.8)} \n                          x2=\"935\" \n                          y2={420 - (tick * 3.8)} \n                          stroke=\"#cbd5e1\" \n                          strokeWidth=\"2\" \n                        />\n                        <text \n                          x=\"938\" \n                          y={420 - (tick * 3.8)} \n                          textAnchor=\"start\" \n                          alignmentBaseline=\"middle\" \n                          fontSize=\"14\"\n                          fill=\"#64748b\"\n                        >\n                          {tick}%\n                        </text>\n                      </g>\n                    ))}\n                    \n                    {/* Grid lines */}\n                    {[0, 25, 50, 75, 100].map((tick, i) => (\n                      <line \n                        key={`grid-${i}`}\n                        x1=\"70\" \n                        y1={420 - (tick * 3.8)} \n                        x2=\"930\" \n                        y2={420 - (tick * 3.8)} \n                        stroke=\"#e2e8f0\" \n                        strokeWidth=\"1\" \n                        strokeDasharray=\"5,5\"\n                      />\n                    ))}\n                    \n                    {/* Generate line paths for accuracy and score */}\n                    {progressData.trendData && progressData.trendData.accuracy && progressData.trendData.accuracy.length > 0 && (\n                      <>\n                        {/* Score line (primary metric) */}\n                        <path \n                          d={progressData.trendData.score.reduce((path, score, i, arr) => {\n                            const dataLength = progressData.trendData.score.length;\n                            const xStep = 860 / (dataLength - 1 || 1);\n                            // Reverse the index to make dates ascend from left to right\n                            const revIndex = dataLength - 1 - i;\n                            const x = 70 + (revIndex * xStep);\n                            const maxScore = Math.max(...progressData.trendData.score);\n                            const y = 420 - (score * (380 / (maxScore || 1)));\n                            return `${path} ${i === 0 ? 'M' : 'L'} ${x},${y}`;\n                          }, '')}\n                          fill=\"none\" \n                          stroke=\"#4f46e5\" \n                          strokeWidth=\"3\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                        />\n\n                        {/* Accuracy line (secondary metric) */}\n                        <path \n                          d={progressData.trendData.accuracy.reduce((path, accuracy, i) => {\n                            const dataLength = progressData.trendData.accuracy.length;\n                            const xStep = 860 / (dataLength - 1 || 1);\n                            // Reverse the index to make dates ascend from left to right\n                            const revIndex = dataLength - 1 - i;\n                            const x = 70 + (revIndex * xStep);\n                            const y = 420 - (accuracy * 3.8);\n                            return `${path} ${i === 0 ? 'M' : 'L'} ${x},${y}`;\n                          }, '')}\n                          fill=\"none\" \n                          stroke=\"#ffa500\" \n                          strokeWidth=\"3\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                        />\n                        \n                        {/* Score data points */}\n                        {progressData.trendData.score.map((score, i) => {\n                          const dataLength = progressData.trendData.score.length;\n                          const xStep = 860 / (dataLength - 1 || 1);\n                          // Reverse the index to make dates ascend from left to right\n                          const revIndex = dataLength - 1 - i;\n                          const x = 70 + (revIndex * xStep);\n                          const maxScore = Math.max(...progressData.trendData.score);\n                          const y = 420 - (score * (380 / (maxScore || 1)));\n                          return (\n                            <g key={`score-point-${i}`}>\n                              <circle \n                                cx={x}\n                                cy={y}\n                                r=\"6\" \n                                fill=\"#4f46e5\" \n                              />\n                              <circle \n                                cx={x}\n                                cy={y}\n                                r=\"4\" \n                                fill=\"#fff\" \n                              />\n                              <title>\n                                {`Date: ${formatDate(progressData.trendData.dates[i])}\\nAccuracy: ${progressData.trendData.accuracy[i]}%\\nScore: ${score}`}\n                              </title>\n                            </g>\n                          );\n                        })}\n                        \n                        {/* Accuracy data points */}\n                        {progressData.trendData.accuracy.map((accuracy, i) => {\n                          const dataLength = progressData.trendData.accuracy.length;\n                          const xStep = 860 / (dataLength - 1 || 1);\n                          // Reverse the index to make dates ascend from left to right\n                          const revIndex = dataLength - 1 - i;\n                          const x = 70 + (revIndex * xStep);\n                          const y = 420 - (accuracy * 3.8);\n                          return (\n                            <g key={`accuracy-point-${i}`}>\n                              <circle \n                                cx={x}\n                                cy={y}\n                                r=\"6\" \n                                fill=\"#ffa500\" \n                              />\n                              <circle \n                                cx={x}\n                                cy={y}\n                                r=\"4\" \n                                fill=\"#fff\" \n                              />\n                              <title>\n                                {`Date: ${formatDate(progressData.trendData.dates[i])}\\nAccuracy: ${accuracy}%\\nScore: ${progressData.trendData.score[i]}`}\n                              </title>\n                            </g>\n                          );\n                        })}\n                        \n                        {/* X-axis labels (dates) - fixed positioning */}\n                        {progressData.trendData.dates.map((date, i) => {\n                          const dataLength = progressData.trendData.dates.length;\n                          const xStep = 860 / (dataLength - 1 || 1);\n                          // Reverse the index to make dates ascend from left to right\n                          const revIndex = dataLength - 1 - i;\n                          const x = 70 + (revIndex * xStep);\n                          \n                          // Only show labels for the first, middle, and last date if there are more than 3\n                          const showLabel = dataLength <= 5 || i === 0 || i === dataLength - 1 || i === Math.floor(dataLength / 2);\n                          \n                          return showLabel ? (\n                            <text \n                              key={`x-label-${i}`}\n                              x={x} \n                              y=\"460\" \n                              textAnchor=\"middle\" \n                              fontSize=\"14\"\n                              fill=\"#64748b\"\n                              transform={`rotate(45 ${x}, 460)`}\n                            >\n                              {formatDate(date)}\n                            </text>\n                          ) : null;\n                        })}\n\n                        {/* Y-axis titles */}\n                        <text \n                          x=\"25\" \n                          y=\"230\" \n                          textAnchor=\"middle\" \n                          fontSize=\"15\"\n                          fontWeight=\"600\"\n                          fill=\"#64748b\"\n                          transform=\"rotate(-90 25, 230)\"\n                        >\n                          Score\n                        </text>\n                        <text \n                          x=\"975\" \n                          y=\"230\" \n                          textAnchor=\"middle\" \n                          fontSize=\"15\"\n                          fontWeight=\"600\"\n                          fill=\"#64748b\"\n                          transform=\"rotate(90 975, 230)\"\n                        >\n                          Accuracy (%)\n                        </text>\n                      </>\n                    )}\n                  </svg>\n                  \n                  <div className=\"chart-legend\">\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"#4f46e5\" }}></div>\n                      <div className=\"legend-label\">Score</div>\n                    </div>\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"#ffa500\" }}></div>\n                      <div className=\"legend-label\">Accuracy (%)</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Cohort Comparison Section */}\n          <div className=\"performance-section\">\n            <h3>Comparison with Peers</h3>\n            {progressData.cohortComparison && progressData.cohortComparison.userAccuracy === 0 ? (\n              <p className=\"no-data\">No comparison data available yet. Complete more sessions to see how you compare with peers.</p>\n            ) : (\n              <div className=\"cohort-comparison\">\n                <div className=\"comparison-info\">\n                  <p>See how your performance compares to other students working on similar problems.</p>\n                </div>\n                \n                {/* Combined section for Strongest Metric and Radar Chart */}\n                <div className=\"comparison-container\">\n                  {/* Left side: Your Strongest Metric section */}\n                  <div className=\"best-metric-section\">\n                    <div className=\"section-title\">Your Strongest Metric</div>\n                    <div className=\"best-metric-container\">\n                      {(() => {\n                        const bestMetric = findBestMetric();\n                        let metricValue = '';\n                        let metricColor = '#4f46e5';\n                        \n                        if (bestMetric === 'Score') {\n                          metricValue = `${Number(progressData.cohortComparison.userScore).toFixed(1)}/${Number(progressData.cohortComparison.peerMaxScore).toFixed(1)}`;\n                          metricColor = '#4f46e5';\n                        } else if (bestMetric === 'Accuracy') {\n                          metricValue = `${Number(progressData.cohortComparison.userAccuracy).toFixed(1)}%`;\n                          metricColor = '#ffa500';\n                        } else if (bestMetric === 'Speed') {\n                          // Show speed as both raw value and percentile rank\n                          const speedPercentile = Math.round(calculateSpeedPercentile());\n                          metricValue = `${Number(progressData.cohortComparison.userSpeed).toFixed(2)}s (${speedPercentile}%)`;\n                          metricColor = '#10b981';\n                        }\n                        \n                        return (\n                          <div className=\"best-metric-highlight\" style={{ color: metricColor }}>\n                            <span className=\"best-metric-name\">{bestMetric}</span>\n                            <span className=\"best-metric-value\">{metricValue}</span>\n                            {bestMetric === 'Speed' && (\n                              <span style={{ fontSize: '0.8rem', marginTop: '5px' }}>\n                                (lower time is better)\n                              </span>\n                            )}\n                          </div>\n                        );\n                      })()}\n                    </div>\n                    <div className=\"percentile-text\">\n                      You're in the top {Math.round(100 - (progressData.cohortComparison ? progressData.cohortComparison.userPercentile : 0))}% of students\n                    </div>\n                  </div>\n                  \n                  {/* Right side: Performance Metrics Comparison */}\n                  <div className=\"radar-chart-section\">\n                    <div className=\"section-title\">Performance Metrics Comparison</div>\n                    \n                    {/* Informational text about speed percentile */}\n                    <div style={{ fontSize: '0.9rem', color: '#64748b', marginBottom: '18px', textAlign: 'left', padding: '0 5px' }}>\n                      Note: For Speed, a lower time (seconds) is better, but a higher percentile represents better performance.\n                    </div>\n                  \n                  <div style={{ alignSelf: 'center', width: '100%', display: 'flex', justifyContent: 'center' }} className=\"radar-chart\">\n                    <svg width=\"100%\" height=\"480\" viewBox=\"0 0 480 480\" preserveAspectRatio=\"xMidYMid meet\">\n                      {/* Enhancement zone indicator (35% circle) */}\n                      <circle \n                        cx=\"240\" \n                        cy=\"240\" \n                        r={180 * 0.35} \n                        fill=\"rgba(226, 232, 240, 0.25)\" \n                        stroke=\"#e2e8f0\" \n                        strokeWidth=\"1.5\" \n                        strokeDasharray=\"4,3\"\n                      />\n                      \n                      {/* Background circles */}\n                      {[0.25, 0.5, 0.75, 1].map((scale, i) => (\n                        <g key={`bg-circle-${i}`}>\n                          <circle \n                            cx=\"240\" \n                            cy=\"240\" \n                            r={180 * scale} \n                            fill={scale === 0.25 ? \"rgba(226, 232, 240, 0.1)\" : \n                                 scale === 0.5 ? \"rgba(226, 232, 240, 0.15)\" : \n                                 scale === 0.75 ? \"rgba(226, 232, 240, 0.05)\" : \n                                 \"rgba(226, 232, 240, 0.02)\"}\n                            stroke={scale === 1 ? \"#cbd5e1\" : \"#e2e8f0\"} \n                            strokeWidth={scale === 1 ? \"1.5\" : \"1\"} \n                            opacity={scale === 1 ? 0.9 : 0.7} \n                          />\n                          {scale === 0.25 && (\n                            <text x=\"246\" y={240 - (180 * scale)} textAnchor=\"start\" fontSize=\"11\" fill=\"#94a3b8\" opacity=\"0.9\" fontWeight=\"600\">\n                              {Math.round(scale * 100)}%\n                            </text>\n                          )}\n                          {scale === 0.5 && (\n                            <text x=\"246\" y={240 - (180 * scale)} textAnchor=\"start\" fontSize=\"11\" fill=\"#94a3b8\" opacity=\"0.9\" fontWeight=\"600\">\n                              {Math.round(scale * 100)}%\n                            </text>\n                          )}\n                          {scale === 0.75 && (\n                            <text x=\"246\" y={240 - (180 * scale)} textAnchor=\"start\" fontSize=\"11\" fill=\"#94a3b8\" opacity=\"0.9\" fontWeight=\"600\">\n                              {Math.round(scale * 100)}%\n                            </text>\n                          )}\n                          {scale === 1 && (\n                            <text x=\"246\" y={240 - (180 * scale)} textAnchor=\"start\" fontSize=\"11\" fill=\"#94a3b8\" opacity=\"0.9\" fontWeight=\"600\">\n                              100%\n                            </text>\n                          )}\n                        </g>\n                      ))}\n                      \n                      {/* Axis lines */}\n                      {[\n                        { label: \"Score\", angle: 0 },\n                        { label: \"Accuracy\", angle: 120 },\n                        { label: \"Speed\", angle: 240 }\n                      ].map((axis, i) => {\n                        const radian = (axis.angle - 90) * (Math.PI / 180);\n                        const x = 240 + 180 * Math.cos(radian);\n                        const y = 240 + 180 * Math.sin(radian);\n                        \n                        // Calculate label position a bit further out\n                        const labelRadian = (axis.angle - 90) * (Math.PI / 180);\n                        const labelDistance = 216; // Standard distance for labels\n                        const maxValueDistance = 236; // Slightly further out for max values\n                        const labelX = 240 + labelDistance * Math.cos(labelRadian);\n                        const labelY = 240 + labelDistance * Math.sin(labelRadian);\n                        \n                        // Calculate position for max value text\n                        const maxLabelX = 240 + maxValueDistance * Math.cos(labelRadian);\n                        const maxLabelY = 240 + maxValueDistance * Math.sin(labelRadian);\n                        \n                        return (\n                          <g key={`axis-${i}`}>\n                            <line \n                              x1=\"240\" \n                              y1=\"240\" \n                              x2={x} \n                              y2={y} \n                              stroke={axis.label === \"Score\" ? \"rgba(79, 70, 229, 0.4)\" :\n                                      axis.label === \"Accuracy\" ? \"rgba(255, 165, 0, 0.4)\" :\n                                      \"rgba(16, 185, 129, 0.4)\"} // Color-coded axes\n                              strokeWidth=\"2.5\" // Thicker stroke\n                            />\n                            <text \n                              x={labelX} \n                              y={labelY} \n                              textAnchor=\"middle\" \n                              dominantBaseline=\"middle\" \n                              className=\"radar-axis-label\"\n                              fill={axis.label === \"Score\" ? \"#4f46e5\" :\n                                    axis.label === \"Accuracy\" ? \"#ffa500\" :\n                                    \"#10b981\"} // Color-coded by metric\n                              style={{ \n                                textShadow: \"0px 0px 4px #ffffff, 0px 0px 5px rgba(255,255,255,0.9)\",\n                                fontWeight: \"bold\"\n                              }}\n                            >\n                              {axis.label}\n                            </text>\n                            \n                            {/* Add max value labels below the axis labels, outside the circle */}\n                            <text \n                              x={maxLabelX} \n                              y={maxLabelY + 8} \n                              textAnchor=\"middle\" \n                              fontSize=\"10\" \n                              fill=\"#64748b\"\n                              className=\"radar-axis-value\"\n                              style={{\n                                fontStyle: \"italic\",\n                                textShadow: \"0px 0px 4px #ffffff, 0px 0px 4px #ffffff\"\n                              }}\n                            >\n                              {axis.label === \"Speed\" \n                                ? `(peer best: ${Number(progressData.cohortComparison.peerMaxSpeed).toFixed(2)}s)` \n                                : axis.label === \"Accuracy\" \n                                  ? `(max: ${Number(progressData.cohortComparison.peerMaxAccuracy).toFixed(1)}%)`\n                                  : `(max: ${Number(progressData.cohortComparison.peerMaxScore).toFixed(1)})`\n                              }\n                            </text>\n                          </g>\n                        );\n                      })}\n                      \n                      {/* Peer maximum area - actual peer values */}\n                      <path \n                        d={(() => {\n                          const scoreAngle = -90 * (Math.PI / 180);\n                          const accuracyAngle = (120 - 90) * (Math.PI / 180);\n                          const speedAngle = (240 - 90) * (Math.PI / 180);\n                          \n                          // Calculate peer maximum values as a percentage of theoretical maximum\n                          const peerScoreRatio = progressData.cohortComparison.peerMaxScore / 100;\n                          const peerAccuracyRatio = progressData.cohortComparison.peerMaxAccuracy / 100;\n                          \n                          // For speed, we use a normalized value (85% of max) for better visualization\n                          // Speed is in seconds, so lower is better - we estimate top percentile\n                          const peerSpeedRatio = 0.85; // Representing approximately 85th percentile\n                          \n                          // Apply a minimum scale factor for better visibility\n                          const minScaleFactor = 0.35;\n                          const enhancedPeerScoreRatio = minScaleFactor + (1 - minScaleFactor) * peerScoreRatio;\n                          const enhancedPeerAccuracyRatio = minScaleFactor + (1 - minScaleFactor) * peerAccuracyRatio;\n                          const enhancedPeerSpeedRatio = minScaleFactor + (1 - minScaleFactor) * peerSpeedRatio;\n                          \n                          const scoreX = 240 + 180 * enhancedPeerScoreRatio * Math.cos(scoreAngle);\n                          const scoreY = 240 + 180 * enhancedPeerScoreRatio * Math.sin(scoreAngle);\n                          \n                          const accuracyX = 240 + 180 * enhancedPeerAccuracyRatio * Math.cos(accuracyAngle);\n                          const accuracyY = 240 + 180 * enhancedPeerAccuracyRatio * Math.sin(accuracyAngle);\n                          \n                          const speedX = 240 + 180 * enhancedPeerSpeedRatio * Math.cos(speedAngle);\n                          const speedY = 240 + 180 * enhancedPeerSpeedRatio * Math.sin(speedAngle);\n                          \n                          return `M ${scoreX} ${scoreY} L ${accuracyX} ${accuracyY} L ${speedX} ${speedY} Z`;\n                        })()}\n                        fill=\"rgba(148, 163, 184, 0.2)\"\n                        stroke=\"#94a3b8\"\n                        strokeWidth=\"2\"\n                        strokeLinejoin=\"round\"\n                      />\n                      \n                      {/* 100% border line connecting all axes - Theoretical Maximum */}\n                      <path\n                        d={(() => {\n                          const scoreAngle = -90 * (Math.PI / 180);\n                          const accuracyAngle = (120 - 90) * (Math.PI / 180);\n                          const speedAngle = (240 - 90) * (Math.PI / 180);\n                          \n                          // Calculate points at 100% for each axis\n                          const scoreX = 240 + 180 * Math.cos(scoreAngle);\n                          const scoreY = 240 + 180 * Math.sin(scoreAngle);\n                          const accuracyX = 240 + 180 * Math.cos(accuracyAngle);\n                          const accuracyY = 240 + 180 * Math.sin(accuracyAngle);\n                          const speedX = 240 + 180 * Math.cos(speedAngle);\n                          const speedY = 240 + 180 * Math.sin(speedAngle);\n                          \n                          // Create a closed path connecting all three points\n                          return `M ${scoreX} ${scoreY} L ${accuracyX} ${accuracyY} L ${speedX} ${speedY} Z`;\n                        })()}\n                        fill=\"rgba(229, 62, 62, 0.05)\"\n                        stroke=\"#e53e3e\" \n                        strokeWidth=\"2.5\"\n                        strokeLinejoin=\"round\"\n                      />\n                      \n                      {/* 100% point markers */}\n                      {(() => {\n                        const angles = [\n                          { label: \"Score\", angle: -90 * (Math.PI / 180) },\n                          { label: \"Accuracy\", angle: (120 - 90) * (Math.PI / 180) },\n                          { label: \"Speed\", angle: (240 - 90) * (Math.PI / 180) }\n                        ];\n                        \n                        return angles.map((item, i) => {\n                          const x = 240 + 180 * Math.cos(item.angle);\n                          const y = 240 + 180 * Math.sin(item.angle);\n                          \n                          // Position for the 100% label\n                          const labelX = 240 + 194 * Math.cos(item.angle);\n                          const labelY = 240 + 194 * Math.sin(item.angle);\n                          \n                          return (\n                            <g key={`max-point-${i}`}>\n                              <circle \n                                cx={x} \n                                cy={y} \n                                r=\"5\" \n                                fill=\"#e53e3e\" \n                              />\n                              <circle \n                                cx={x} \n                                cy={y} \n                                r=\"3\" \n                                fill=\"#fff\" \n                              />\n                            </g>\n                          );\n                        });\n                      })()}\n                      \n                      {/* User performance area */}\n                      <path \n                        d={(() => {\n                          const scoreAngle = -90 * (Math.PI / 180);\n                          const accuracyAngle = (120 - 90) * (Math.PI / 180);\n                          const speedAngle = (240 - 90) * (Math.PI / 180);\n                          \n                          // Calculate relative positions for Option 1 (all axes extend to 100%)\n                          // For score and accuracy, we compare to 100 as the theoretical maximum\n                          // For speed, we use the percentile which is already on a 0-100 scale\n                          const scoreRatio = progressData.cohortComparison.userScore / 100; // Compare to theoretical maximum of 100\n                          const accuracyRatio = progressData.cohortComparison.userAccuracy / 100; // Already on 0-100 scale\n                          \n                          // For speed, calculate the percentile (higher is better)\n                          const normalizedUserSpeed = calculateSpeedPercentile() / 100;\n                          \n                          // Log calculated ratios for debugging\n                          console.log('Radar Chart Ratios:', {\n                            scoreRatio: scoreRatio.toFixed(3),\n                            accuracyRatio: accuracyRatio.toFixed(3),\n                            speedRatio: normalizedUserSpeed.toFixed(3)\n                          });\n                          \n                          // Apply a minimum scale factor (0.35) to ensure metrics are visible\n                          // This \"pulls\" small values away from the center for better visibility\n                          const minScaleFactor = 0.35;\n                          const enhancedScoreRatio = minScaleFactor + (1 - minScaleFactor) * scoreRatio;\n                          const enhancedAccuracyRatio = minScaleFactor + (1 - minScaleFactor) * accuracyRatio;\n                          const enhancedSpeedRatio = minScaleFactor + (1 - minScaleFactor) * normalizedUserSpeed;\n                          \n                          const scoreX = 240 + 180 * enhancedScoreRatio * Math.cos(scoreAngle);\n                          const scoreY = 240 + 180 * enhancedScoreRatio * Math.sin(scoreAngle);\n                          \n                          const accuracyX = 240 + 180 * enhancedAccuracyRatio * Math.cos(accuracyAngle);\n                          const accuracyY = 240 + 180 * enhancedAccuracyRatio * Math.sin(accuracyAngle);\n                          \n                          const speedX = 240 + 180 * enhancedSpeedRatio * Math.cos(speedAngle);\n                          const speedY = 240 + 180 * enhancedSpeedRatio * Math.sin(speedAngle);\n                          \n                          return `M ${scoreX} ${scoreY} L ${accuracyX} ${accuracyY} L ${speedX} ${speedY} Z`;\n                        })()}\n                        fill=\"rgba(79, 70, 229, 0.45)\" // Increased opacity for better visibility\n                        stroke=\"#4f46e5\"\n                        strokeWidth=\"2.5\" // Slightly thicker stroke\n                      />\n                      \n                      {/* User performance points */}\n                      {(() => {\n                        const scoreAngle = -90 * (Math.PI / 180);\n                        const accuracyAngle = (120 - 90) * (Math.PI / 180);\n                        const speedAngle = (240 - 90) * (Math.PI / 180);\n                        \n                        // For Option 1, calculate relative positions based on theoretical maximums\n                        // Score - compare to max possible score of 100\n                        // Accuracy - already on a 0-100 scale\n                        // Speed - use percentile which is already normalized to 0-100\n                        const scoreRatio = progressData.cohortComparison.userScore / 100;\n                        const accuracyRatio = progressData.cohortComparison.userAccuracy / 100;\n                        const normalizedUserSpeed = calculateSpeedPercentile() / 100;\n                        \n                        // Apply minimum scale factor for better visibility\n                        const minScaleFactor = 0.35;\n                        const enhancedScoreRatio = minScaleFactor + (1 - minScaleFactor) * scoreRatio;\n                        const enhancedAccuracyRatio = minScaleFactor + (1 - minScaleFactor) * accuracyRatio;\n                        const enhancedSpeedRatio = minScaleFactor + (1 - minScaleFactor) * normalizedUserSpeed;\n                        \n                        const scoreX = 240 + 180 * enhancedScoreRatio * Math.cos(scoreAngle);\n                        const scoreY = 240 + 180 * enhancedScoreRatio * Math.sin(scoreAngle);\n                        \n                        const accuracyX = 240 + 180 * enhancedAccuracyRatio * Math.cos(accuracyAngle);\n                        const accuracyY = 240 + 180 * enhancedAccuracyRatio * Math.sin(accuracyAngle);\n                        \n                        const speedX = 240 + 180 * enhancedSpeedRatio * Math.cos(speedAngle);\n                        const speedY = 240 + 180 * enhancedSpeedRatio * Math.sin(speedAngle);\n                        \n                        // Calculate which metric is the student's strongest\n                        let bestMetricIndex = 0;\n                        let metrics = [\n                          { ratio: scoreRatio, index: 0, name: 'Score' },\n                          { ratio: accuracyRatio, index: 1, name: 'Accuracy' },\n                          { ratio: normalizedUserSpeed, index: 2, name: 'Speed' }\n                        ];\n                        \n                        // Sort metrics by their ratio values (descending)\n                        const sortedMetrics = [...metrics].sort((a, b) => b.ratio - a.ratio);\n                        bestMetricIndex = sortedMetrics[0].index;\n                        \n                        // Log the metric rankings for debugging\n                        console.log('Radar Chart Metric Rankings:', sortedMetrics.map(m => `${m.name}: ${(m.ratio * 100).toFixed(1)}%`).join(', '));\n                        \n                        return [\n                          { \n                            x: scoreX, \n                            y: scoreY, \n                            label: \"Score\", \n                            value: `${Number(progressData.cohortComparison.userScore).toFixed(1)}`, \n                            max: `${Number(progressData.cohortComparison.peerMaxScore).toFixed(1)}`,\n                            isBest: bestMetricIndex === 0 \n                          },\n                          { \n                            x: accuracyX, \n                            y: accuracyY, \n                            label: \"Accuracy\", \n                            value: `${Number(progressData.cohortComparison.userAccuracy).toFixed(1)}%`, \n                            max: `${Number(progressData.cohortComparison.peerMaxAccuracy).toFixed(1)}%`,\n                            isBest: bestMetricIndex === 1 \n                          },\n                          { \n                            x: speedX, \n                            y: speedY, \n                            label: \"Speed\", \n                            // Make sure percentile is visible by always displaying it at least 0%\n                            value: `${Number(progressData.cohortComparison.userSpeed).toFixed(2)}s (${Math.max(0, Math.round(calculateSpeedPercentile()))}%)`, \n                            max: `${Number(progressData.cohortComparison.peerMaxSpeed).toFixed(2)}s`,\n                            percentile: Math.max(0, Math.round(calculateSpeedPercentile())),\n                            isBest: bestMetricIndex === 2 \n                          }\n                        ].map((point, i) => (\n                          <g key={`point-${i}`}>\n                            {/* Value background */}\n                            <rect\n                              x={point.x - 28}\n                              y={point.y - 30}\n                              width=\"56\" // Even wider for more space\n                              height=\"24\" // Taller for better visibility\n                              rx=\"6\" \n                              ry=\"6\"\n                              fill={point.isBest ? \"rgba(16, 185, 129, 0.25)\" : \n                                   point.label === \"Score\" ? \"rgba(79, 70, 229, 0.25)\" :\n                                   point.label === \"Accuracy\" ? \"rgba(255, 165, 0, 0.25)\" :\n                                   \"rgba(16, 185, 129, 0.25)\"} // Color-code by metric\n                              stroke={point.isBest ? \"#10b981\" : \n                                     point.label === \"Score\" ? \"#4f46e5\" :\n                                     point.label === \"Accuracy\" ? \"#ffa500\" :\n                                     \"#10b981\"}\n                              strokeWidth={point.isBest ? \"1.5\" : \"1\"}\n                              style={{\n                                filter: point.isBest ? \"drop-shadow(0px 0px 4px rgba(16, 185, 129, 0.6))\" : \n                                        \"drop-shadow(0px 0px 2px rgba(0, 0, 0, 0.1))\",\n                                opacity: 0.95\n                              }}\n                            />\n                            \n                            {/* Highlight the best metric with a different color */}\n                            <circle \n                              cx={point.x} \n                              cy={point.y} \n                              r=\"8\" // Larger for better visibility\n                              fill={point.isBest ? \"#10b981\" : \n                                   point.label === \"Score\" ? \"#4f46e5\" :\n                                   point.label === \"Accuracy\" ? \"#ffa500\" :\n                                   \"#10b981\"} // Color-code by metric\n                            />\n                            <circle \n                              cx={point.x} \n                              cy={point.y} \n                              r=\"5\" // Larger for better visibility\n                              fill=\"#fff\" \n                            />\n                            \n                            {/* Display the metric name and value */}\n                            <text \n                              x={point.x} \n                              y={point.y - 18} \n                              textAnchor=\"middle\" \n                              className=\"radar-metric-value\"\n                              fill={point.isBest ? \"#10b981\" : \n                                   point.label === \"Score\" ? \"#4f46e5\" :\n                                   point.label === \"Accuracy\" ? \"#ffa500\" :\n                                   \"#10b981\"} // Color-code by metric\n                              style={{\n                                textShadow: \"0px 0px 5px #fff, 0px 0px 5px #fff\",\n                                fontWeight: \"700\",\n                                letterSpacing: \"0.2px\"\n                              }}\n                            >\n                              {point.value}\n                            </text>\n                            \n                            {/* Add a star or badge for the best metric */}\n                            {point.isBest && (\n                              <g>\n                                <rect\n                                  x={point.x + 16}\n                                  y={point.y - 30}\n                                  width=\"18\"\n                                  height=\"18\"\n                                  rx=\"9\"\n                                  ry=\"9\"\n                                  fill=\"#10b981\"\n                                  style={{\n                                    filter: \"drop-shadow(0px 0px 3px rgba(16, 185, 129, 0.8))\"\n                                  }}\n                                />\n                                <text\n                                  x={point.x + 25}\n                                  y={point.y - 20}\n                                  textAnchor=\"middle\"\n                                  fontSize=\"12\"\n                                  fontWeight=\"bold\"\n                                  fill=\"white\"\n                                  style={{\n                                    textShadow: \"0px 0px 1px rgba(0,0,0,0.3)\"\n                                  }}\n                                >\n                                  ★\n                                </text>\n                              </g>\n                            )}\n                          </g>\n                        ));\n                      })()}\n                      \n                      {/* Center point and label */}\n                      <circle cx=\"240\" cy=\"240\" r=\"4\" fill=\"#64748b\" />\n                      <circle cx=\"240\" cy=\"240\" r=\"8\" fill=\"rgba(100, 116, 139, 0.2)\" stroke=\"#64748b\" strokeWidth=\"1\" />\n                    </svg>\n                  </div>\n                  \n                  <div style={{ alignSelf: 'flex-start', width: '100%' }} className=\"radar-legend\">\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"rgba(79, 70, 229, 0.45)\", border: \"2px solid #4f46e5\" }}></div>\n                      <div className=\"legend-label\">Your Performance</div>\n                    </div>\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"rgba(148, 163, 184, 0.2)\", border: \"2px solid #94a3b8\" }}></div>\n                      <div className=\"legend-label\">Peer Best Values</div>\n                    </div>\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"rgba(229, 62, 62, 0.05)\", border: \"2px solid #e53e3e\" }}></div>\n                      <div className=\"legend-label\">Theoretical Maximum (100%)</div>\n                    </div>\n                    <div className=\"legend-item\">\n                      <div className=\"legend-color\" style={{ backgroundColor: \"#10b981\" }}></div>\n                      <div className=\"legend-label\">Your Best Metric</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"spacer-between-sections\"></div>\n                  \n                  {/* Additional information for understanding metrics */}\n                  <div className=\"non-overlapping-chart-elements\" style={{ marginTop: '15px', padding: '0 5px', width: '100%' }}>\n                    <p className=\"radar-info-text\">This radar chart displays three layers of information:</p>\n                    <ul style={{ fontSize: '0.9rem', color: '#64748b', marginTop: '5px', paddingLeft: '20px' }}>\n                      <li><strong style={{ color: '#4f46e5' }}>Your Performance</strong> (innermost triangle) - Your current metrics</li>\n                      <li><strong style={{ color: '#94a3b8' }}>Peer Best Values</strong> (middle triangle) - Top performance among your peers</li>\n                      <li><strong style={{ color: '#e53e3e' }}>Theoretical Maximum</strong> (outermost triangle) - 100% on all metrics</li>\n                    </ul>\n                    <p className=\"radar-info-text\" style={{ marginTop: '10px' }}>\n                      For reference, peer best values are: <br/>\n                      <span className=\"text-with-buffer\">Score: {Number(progressData.cohortComparison.peerMaxScore).toFixed(1)}/100</span>, &nbsp;\n                      <span className=\"text-with-buffer\">Accuracy: {Number(progressData.cohortComparison.peerMaxAccuracy).toFixed(1)}%</span>, &nbsp;\n                      <span className=\"text-with-buffer\">Speed: {Number(progressData.cohortComparison.peerMaxSpeed).toFixed(2)}s</span>\n                    </p>\n                    <p className=\"radar-info-text\">Values below 35% are enhanced for better visibility.</p>\n                  </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Difficulty Performance Section */}\n          <div className=\"performance-section\">\n            <h3>Performance by Difficulty</h3>\n            <div className=\"difficulty-chart\">\n              {Object.entries(progressData.difficultyPerformance).map(([difficulty, data]) => (\n                <div key={difficulty} className={`difficulty-bar difficulty-${difficulty.toLowerCase()}`}>\n                  <div className=\"difficulty-label\">{difficulty}</div>\n                  <div className=\"bar-container\">\n                    <div \n                      className=\"bar-fill\" \n                      style={{ width: `${data.accuracy}%` }}\n                    ></div>\n                    <div className=\"bar-text\">{formatAccuracy(data.accuracy)}</div>\n                  </div>\n                  <div className=\"attempt-info\">\n                    {data.correct}/{data.attempted} correct\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Topic Performance Section */}\n          <div className=\"performance-section\">\n            <h3>Performance by Topic</h3>\n            <div className=\"topic-chart\">\n              {Object.entries(progressData.topicPerformance)\n                .sort((a, b) => b[1].attempted - a[1].attempted) // Sort by most attempted\n                .slice(0, 6) // Show top 6 most attempted topics\n                .map(([topic, data]) => (\n                  <div key={topic} className=\"topic-row\">\n                    <div className=\"topic-name\">{topic}</div>\n                    <div className=\"bar-container\">\n                      <div \n                        className=\"bar-fill\" \n                        style={{ width: `${data.accuracy}%` }}\n                      ></div>\n                      <div className=\"bar-text\">{formatAccuracy(data.accuracy)}</div>\n                    </div>\n                    <div className=\"attempt-info\">\n                      {data.correct}/{data.attempted}\n                    </div>\n                  </div>\n                ))\n              }\n            </div>\n            {Object.keys(progressData.topicPerformance).length > 6 && (\n              <div className=\"more-topics-info\">\n                + {Object.keys(progressData.topicPerformance).length - 6} more topics\n              </div>\n            )}\n          </div>\n\n          {/* Recent Sessions Section */}\n          <div className=\"performance-section\">\n            <h3>Recent Sessions</h3>\n            <div className=\"recent-sessions\">\n              {progressData.recentSessions.length === 0 ? (\n                <p className=\"no-data\">No recent sessions found.</p>\n              ) : (\n                <table className=\"sessions-table\">\n                  <thead>\n                    <tr>\n                      <th>Date</th>\n                      <th>Contest</th>\n                      <th>Mode</th>\n                      <th>Score</th>\n                      <th>Accuracy</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {progressData.recentSessions.map((session, index) => (\n                      <tr key={index}>\n                        <td>{formatDate(session.completedAt)}</td>\n                        <td>{session.contest} {session.year}</td>\n                        <td>{session.mode}</td>\n                        <td>{session.score}/{session.totalAttempted}</td>\n                        <td>{formatAccuracy(session.accuracy)}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              )}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ProgressTracking;\n"],"names":["_ref","username","loading","setLoading","useState","error","setError","progressData","setProgressData","topicPerformance","difficultyPerformance","overallPerformance","totalSessions","totalProblems","averageScore","accuracyPercentage","averageSpeed","recentSessions","trendData","accuracy","score","dates","cohortComparison","userScore","userAccuracy","userSpeed","peerMaxScore","peerMaxAccuracy","peerMaxSpeed","userScorePercentile","userAccuracyPercentile","userSpeedPercentile","useEffect","async","console","log","testResponse","fetch","ok","cohortResponse","axios","get","data","response","success","JSON","stringify","Object","keys","length","warn","fetchProgressData","useEffectDebug","formatAccuracy","Math","round","calculateSpeedPercentile","Number","slowFactor","min","max","speedPercentile","toFixed","formatDate","dateString","Date","toLocaleDateString","undefined","year","month","day","e","_jsxs","className","children","_jsx","Link","to","_Fragment","width","height","viewBox","preserveAspectRatio","x","y","fill","rx","ry","x1","y1","x2","y2","stroke","strokeWidth","maxScore","scoreStep","ceil","scoreLabels","map","tick","i","textAnchor","alignmentBaseline","fontSize","strokeDasharray","d","reduce","path","arr","dataLength","strokeLinecap","strokeLinejoin","cx","cy","r","date","floor","transform","fontWeight","style","backgroundColor","bestMetric","findBestMetric","sortedMetrics","name","value","sort","a","b","forEach","metric","index","metricValue","metricColor","color","marginTop","userPercentile","marginBottom","textAlign","padding","alignSelf","display","justifyContent","scale","opacity","label","angle","axis","radian","PI","cos","sin","labelRadian","labelX","labelY","maxLabelX","maxLabelY","dominantBaseline","textShadow","fontStyle","scoreAngle","accuracyAngle","speedAngle","minScaleFactor","enhancedPeerScoreRatio","enhancedPeerAccuracyRatio","item","scoreRatio","accuracyRatio","normalizedUserSpeed","speedRatio","enhancedScoreRatio","enhancedAccuracyRatio","enhancedSpeedRatio","scoreX","scoreY","accuracyX","accuracyY","speedX","speedY","bestMetricIndex","ratio","m","join","isBest","percentile","point","filter","letterSpacing","border","paddingLeft","entries","_ref2","difficulty","toLowerCase","correct","attempted","slice","_ref3","topic","session","completedAt","contest","mode","totalAttempted"],"sourceRoot":""}